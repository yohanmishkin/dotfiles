{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"daa-tes",
				"data-test-create-sides\tabc"
			],
			[
				"data-tes",
				"data-test-shot-difficulty\t(scene-shots-test.js)"
			],
			[
				"data-test-sce",
				"data-test-scene-typeahead\t(select-scenes-test.js)"
			],
			[
				"showAutmo",
				"showAutomatixExportModal\tabc"
			],
			[
				"succ",
				"success\t(element-form-test.js)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "https://philippe.bourgau.net/detailed-agenda-for-a-ddd-design-level-event-storming-part-1/\n\nhttps://affect.media.mit.edu/\n\nhttps://github.com/react-boilerplate/react-boilerplate/blob/master/docs/testing/component-testing.md\n",
			"settings":
			{
				"buffer_size": 224,
				"line_ending": "Unix",
				"name": "https://philippe.bourgau.net/detailed-agenda-for-a"
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/export/choose-export-options.js",
			"settings":
			{
				"buffer_size": 4052,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 458 files for \"includeVfxBreakdownReport\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/export/choose-export-options.js:\n   15    includeElementReports: false,\n   16    includeSceneReport: false,\n   17:   includeVfxBreakdownReport: false,\n   18    includeCategorySceneReports: false,\n   19    showCategories: or('includeElementReports', 'includeSceneReport'),\n   ..\n   65  \n   66        setProperties(this, {\n   67:         includeVfxBreakdownReport: false,\n   68          includeLegalBreakdownReport: false,\n   69          includeCategorySceneReports: false,\n   ..\n   76  \n   77        setProperties(this, {\n   78:         includeVfxBreakdownReport: false,\n   79          includeLegalBreakdownReport: false,\n   80          includeElementReports: false,\n   ..\n   87  \n   88        setProperties(this, {\n   89:         includeVfxBreakdownReport: false,\n   90          includeLegalBreakdownReport: false,\n   91          includeElementReports: false,\n   ..\n   97  \n   98        setProperties(this, {\n   99:         includeVfxBreakdownReport: false,\n  100          includeLegalBreakdownReport: false,\n  101          includeElementReports: false,\n  ...\n  112          includeElementReports: false,\n  113          includeSceneReport: false,\n  114:         includeVfxBreakdownReport: true\n  115        });\n  116      },\n  ...\n  122          includeSceneReport: false,\n  123          includeCategorySceneReports: false,\n  124:         includeVfxBreakdownReport: false,\n  125          includeLegalBreakdownReport: true\n  126        });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/services/sheet-export-test.js:\n   22        includeCategorySceneReports: true,\n   23        includeElementReports: false,\n   24:       includeVfxBreakdownReport: false\n   25      };\n   26      let service = this.owner.factoryFor('service:sheet-export').create();\n   ..\n   56      );\n   57      assert.equal(\n   58:       serviceControllerContext.includeVfxBreakdownReport,\n   59:       passedInControllerContext.includeVfxBreakdownReport\n   60      );\n   61      assert.verifySteps(['gapi loaded']);\n\n10 matches across 2 files\n\n\nSearching 458 files for \"logInA\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/projects-test.js:\n    9  import { netflixCurrentUser } from '../fixtures/currentUser';\n   10  import stubService from '../helpers/stub-service';\n   11: import logInAs from 'prodicle-scripts-ui/tests/helpers/log-in-as';\n   12  \n   13  module('Acceptance | projects', function(hooks) {\n   ..\n   64  \n   65    test('The list of adhoc scripts can be filtered', async function(assert) {\n   66:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   67  \n   68      let scriptA = this.server.create('script', { title: 'asdfA' });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/sides-test.js:\n    6  import setupMirage from 'ember-cli-mirage/test-support/setup-mirage';\n    7  import stubService from 'prodicle-scripts-ui/tests/helpers/stub-service';\n    8: import logInAs from 'prodicle-scripts-ui/tests/helpers/log-in-as';\n    9  \n   10  module('Acceptance | sides', function(hooks) {\n   ..\n   18  \n   19    test('Users can visit a sides show page', async function(assert) {\n   20:     logInAs(this.server.create('user'), this.server);\n   21      let script = this.server.create('script', { title: 'the best script' });\n   22      let sides = this.server.create('sides', {\n   ..\n   47  \n   48    test('Sides-list \"Send to Distro\" anchor has intended href', async function(assert) {\n   49:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   50  \n   51      let buttonToOpenSidesMenu = '[data-test-sides-action-menu-trigger]';\n   ..\n   69  \n   70    test('Sides show page \"Send to Distro\" link updates sides id as intended', async function(assert) {\n   71:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   72  \n   73      let script = this.server.create('script', { title: 'the best script' });\n   ..\n  111  \n  112    test('Scripts list shows filter input, sides list does not.', async function(assert) {\n  113:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  114      let script = this.server.create('script', { title: 'the best script' });\n  115      this.server.create('sides', {\n  ...\n  133  \n  134    test('When a user is viewing sides for an adhoc script, clicking view sides goes to adHoc side page', async function(assert) {\n  135:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  136      let script = this.server.create('script', { title: 'the best script' });\n  137      let sides = this.server.create('sides', {\n  ...\n  169  \n  170    test(\"When a user is viewing sides for a script for a project, clicking view sides goes to project's side page\", async function(assert) {\n  171:     logInAs(this.server.create('user'), this.server);\n  172      let project = this.server.create('project');\n  173      let script = this.server.create('script', {\n  ...\n  201  \n  202    test('Users can visit a sides show page if the sides are not completed loading and they will see the loading copy', async function(assert) {\n  203:     logInAs(this.server.create('user'), this.server);\n  204      let script = this.server.create('script', { title: 'the best script' });\n  205      let sides = this.server.create('sides', {\n  ...\n  232  \n  233    test('Users can view a project sides', async function(assert) {\n  234:     logInAs(this.server.create('user'), this.server);\n  235  \n  236      let project = this.server.create('project');\n  ...\n  265  \n  266    test(`Users can begin creating sides from a project's scripts list`, async function(assert) {\n  267:     logInAs(this.server.create('user'), this.server);\n  268  \n  269      let project = this.server.create('project');\n  ...\n  281  \n  282    test(`Users can view an ad-hoc script's sides`, async function(assert) {\n  283:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  284  \n  285      let adhocScript = this.server.create('script', { title: 'hey' });\n  ...\n  306  \n  307    test(`Users can begin creating sides from the adhoc scripts list`, async function(assert) {\n  308:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  309  \n  310      let script = this.server.create('script', { title: 'script123' });\n  ...\n  321  \n  322    test('A user can delete a sides record', async function(assert) {\n  323:     logInAs(this.server.create('user'), this.server);\n  324      let project = this.server.create('project');\n  325      let script = this.server.create('script', {\n  ...\n  351  \n  352    test('A user can change the title of a sides record but cancel before save and the change is reverted', async function(assert) {\n  353:     logInAs(this.server.create('user'), this.server);\n  354      let project = this.server.create('project');\n  355      let script = this.server.create('script', {\n  ...\n  382  \n  383    test('A user can change the title of a sides record', async function(assert) {\n  384:     logInAs(this.server.create('user'), this.server);\n  385      this.server.logging = true;\n  386      let project = this.server.create('project');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/helpers/log-in-as.js:\n    1: export default function logInAs(user, server) {\n    2    let session = server.create('session', { user });\n    3    server.get('/api/sessions/current', () => session);\n\n18 matches across 3 files\n\n\nSearching 458 files for \"create\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/package-lock.json:\n  120        }\n  121      },\n  122:     \"@babel/helper-create-class-features-plugin\": {\n  123        \"version\": \"7.4.4\",\n  124:       \"resolved\": \"https://artifacts.netflix.com/api/npm/npm-netflix/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.4.4.tgz\",\n  125        \"integrity\": \"sha1-/D1pCvZVTMnvxgc2SoLUj1hzbbo=\",\n  126        \"dev\": true,\n  ...\n  453        \"dev\": true,\n  454        \"requires\": {\n  455:         \"@babel/helper-create-class-features-plugin\": \"^7.4.4\",\n  456          \"@babel/helper-plugin-utils\": \"^7.0.0\"\n  457        }\n  ...\n  463        \"dev\": true,\n  464        \"requires\": {\n  465:         \"@babel/helper-create-class-features-plugin\": \"^7.4.4\",\n  466          \"@babel/helper-plugin-utils\": \"^7.0.0\",\n  467          \"@babel/plugin-syntax-decorators\": \"^7.2.0\"\n  ...\n 6525          \"buffer-xor\": \"^1.0.3\",\n 6526          \"cipher-base\": \"^1.0.0\",\n 6527:         \"create-hash\": \"^1.1.0\",\n 6528          \"evp_bytestokey\": \"^1.0.3\",\n 6529          \"inherits\": \"^2.0.1\",\n ....\n 6575          \"bn.js\": \"^4.1.1\",\n 6576          \"browserify-rsa\": \"^4.0.0\",\n 6577:         \"create-hash\": \"^1.1.0\",\n 6578:         \"create-hmac\": \"^1.1.2\",\n 6579          \"elliptic\": \"^6.0.0\",\n 6580          \"inherits\": \"^2.0.1\",\n ....\n 7749        }\n 7750      },\n 7751:     \"create-ecdh\": {\n 7752        \"version\": \"4.0.3\",\n 7753:       \"resolved\": \"https://registry.npmjs.org/create-ecdh/-/create-ecdh-4.0.3.tgz\",\n 7754        \"integrity\": \"sha512-GbEHQPMOswGpKXM9kCWVrremUcBmjteUaQ01T9rkKCPDXfUHX0IoP9LpHYo2NPFampa4e+/pFDc3jQdxrxQLaw==\",\n 7755        \"requires\": {\n ....\n 7758        }\n 7759      },\n 7760:     \"create-hash\": {\n 7761        \"version\": \"1.2.0\",\n 7762:       \"resolved\": \"https://registry.npmjs.org/create-hash/-/create-hash-1.2.0.tgz\",\n 7763        \"integrity\": \"sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==\",\n 7764        \"requires\": {\n ....\n 7770        }\n 7771      },\n 7772:     \"create-hmac\": {\n 7773        \"version\": \"1.1.7\",\n 7774:       \"resolved\": \"https://registry.npmjs.org/create-hmac/-/create-hmac-1.1.7.tgz\",\n 7775        \"integrity\": \"sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==\",\n 7776        \"requires\": {\n 7777          \"cipher-base\": \"^1.0.3\",\n 7778:         \"create-hash\": \"^1.1.0\",\n 7779          \"inherits\": \"^2.0.1\",\n 7780          \"ripemd160\": \"^2.0.0\",\n ....\n 7803          \"browserify-cipher\": \"^1.0.0\",\n 7804          \"browserify-sign\": \"^4.0.0\",\n 7805:         \"create-ecdh\": \"^4.0.0\",\n 7806:         \"create-hash\": \"^1.1.0\",\n 7807:         \"create-hmac\": \"^1.1.0\",\n 7808          \"diffie-hellman\": \"^5.0.0\",\n 7809          \"inherits\": \"^2.0.1\",\n ....\n 21216        \"dev\": true,\n 21217        \"requires\": {\n 21218:         \"lodash._basecreate\": \"~2.3.0\",\n 21219          \"lodash._setbinddata\": \"~2.3.0\",\n 21220          \"lodash.isobject\": \"~2.3.0\"\n .....\n 21227        \"dev\": true\n 21228      },\n 21229:     \"lodash._basecreate\": {\n 21230        \"version\": \"2.3.0\",\n 21231:       \"resolved\": \"https://registry.npmjs.org/lodash._basecreate/-/lodash._basecreate-2.3.0.tgz\",\n 21232        \"integrity\": \"sha1-m4ioak3P97fzxh2Dovz8BnHsneA=\",\n 21233        \"dev\": true,\n .....\n 21238        }\n 21239      },\n 21240:     \"lodash._basecreatecallback\": {\n 21241        \"version\": \"2.3.0\",\n 21242:       \"resolved\": \"https://registry.npmjs.org/lodash._basecreatecallback/-/lodash._basecreatecallback-2.3.0.tgz\",\n 21243        \"integrity\": \"sha1-N7KrF1kaM56YjbMln81GAZ16w2I=\",\n 21244        \"dev\": true,\n .....\n 21250        }\n 21251      },\n 21252:     \"lodash._basecreatewrapper\": {\n 21253        \"version\": \"2.3.0\",\n 21254:       \"resolved\": \"https://registry.npmjs.org/lodash._basecreatewrapper/-/lodash._basecreatewrapper-2.3.0.tgz\",\n 21255        \"integrity\": \"sha1-qgxhrZYETDkzN2ExSDqXWcNlEkc=\",\n 21256        \"dev\": true,\n 21257        \"requires\": {\n 21258:         \"lodash._basecreate\": \"~2.3.0\",\n 21259          \"lodash._setbinddata\": \"~2.3.0\",\n 21260          \"lodash._slice\": \"~2.3.0\",\n .....\n 21278        \"dev\": true\n 21279      },\n 21280:     \"lodash._createassigner\": {\n 21281        \"version\": \"3.1.1\",\n 21282:       \"resolved\": \"https://artifacts.netflix.com/api/npm/npm-netflix/lodash._createassigner/-/lodash._createassigner-3.1.1.tgz\",\n 21283        \"integrity\": \"sha1-g4pbri/aymOsIt7o4Z+k5taXCxE=\",\n 21284        \"dev\": true,\n .....\n 21289        }\n 21290      },\n 21291:     \"lodash._createwrapper\": {\n 21292        \"version\": \"2.3.0\",\n 21293:       \"resolved\": \"https://registry.npmjs.org/lodash._createwrapper/-/lodash._createwrapper-2.3.0.tgz\",\n 21294        \"integrity\": \"sha1-0arhEC2t9EDo4G/BM6bt1/4UYHU=\",\n 21295        \"dev\": true,\n 21296        \"requires\": {\n 21297          \"lodash._basebind\": \"~2.3.0\",\n 21298:         \"lodash._basecreatewrapper\": \"~2.3.0\",\n 21299          \"lodash.isfunction\": \"~2.3.0\"\n 21300        }\n .....\n 21393        \"requires\": {\n 21394          \"lodash._baseassign\": \"^3.0.0\",\n 21395:         \"lodash._createassigner\": \"^3.0.0\",\n 21396          \"lodash.keys\": \"^3.0.0\"\n 21397        },\n .....\n 21422        \"dev\": true,\n 21423        \"requires\": {\n 21424:         \"lodash._createwrapper\": \"~2.3.0\",\n 21425          \"lodash._renative\": \"~2.3.0\",\n 21426          \"lodash._slice\": \"~2.3.0\"\n .....\n 21515        \"dev\": true,\n 21516        \"requires\": {\n 21517:         \"lodash._basecreatecallback\": \"~2.3.0\",\n 21518          \"lodash.forown\": \"~2.3.0\"\n 21519        }\n .....\n 21531        \"dev\": true,\n 21532        \"requires\": {\n 21533:         \"lodash._basecreatecallback\": \"~2.3.0\",\n 21534          \"lodash._objecttypes\": \"~2.3.0\",\n 21535          \"lodash.keys\": \"~2.3.0\"\n .....\n 23151          \"asn1.js\": \"^4.0.0\",\n 23152          \"browserify-aes\": \"^1.0.0\",\n 23153:         \"create-hash\": \"^1.1.0\",\n 23154          \"evp_bytestokey\": \"^1.0.0\",\n 23155          \"pbkdf2\": \"^3.0.3\"\n .....\n 23334        \"integrity\": \"sha512-y4CXP3thSxqf7c0qmOF+9UeOTrifiVTIM+u7NWlq+PRsHbr7r7dpCmvzrZxa96JJUNi0Y5w9VqG5ZNeCVMoDcA==\",\n 23335        \"requires\": {\n 23336:         \"create-hash\": \"^1.1.2\",\n 23337:         \"create-hmac\": \"^1.1.4\",\n 23338          \"ripemd160\": \"^2.0.1\",\n 23339          \"safe-buffer\": \"^5.0.1\",\n .....\n 25937          \"bn.js\": \"^4.1.0\",\n 25938          \"browserify-rsa\": \"^4.0.0\",\n 25939:         \"create-hash\": \"^1.1.0\",\n 25940          \"parse-asn1\": \"^5.0.0\",\n 25941          \"randombytes\": \"^2.0.1\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/adapters/application.js:\n   28      }\n   29    },\n   30:   urlForCreateRecord(modelName, snapshot) {\n   31      let scriptId = snapshot.record.get('script.id');\n   32      let elementId = snapshot.record.get('element.id');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/add-shot.js:\n   41  \n   42      this.next(() => {\n   43:       newShot = this.store.createRecord('shot', baseObject);\n   44  \n   45        if (isPresent(this.lineIds)) {\n   ..\n  108    },\n  109    // tasks\n  110:   createShot: task(function*() {\n  111      let shot = this.shot;\n  112      yield shot.save();\n  113      this.notifications.setNotification(\n  114:       this.intl.t('scripts.components.add-shot.create.success'),\n  115        'success'\n  116      );\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-list-item.js:\n   50    actions: {\n   51      transitionToNewElement(category, activeScene) {\n   52:       this.createNewElement(category, activeScene);\n   53      },\n   54      showElementDrawer(elem, category) {\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-select.js:\n   29    },\n   30  \n   31:   findOrCreateCategoryByTitle: task(function*(title) {\n   32      let existingCategory = this.allCategories.findBy('title', title);\n   33  \n   ..\n   35        return existingCategory;\n   36      } else {\n   37:       let newCategory = this.store.createRecord('category', {\n   38          color: randomColor(),\n   39          script: get(this, 'editElement.script'),\n   ..\n   49        yield category.save();\n   50        this.notifications.setNotification(\n   51:         'Category created successfully.',\n   52          'success'\n   53        );\n   ..\n   60    actions: {\n   61      selectCategory(title) {\n   62:       this.findOrCreateCategoryByTitle.perform(title).then(category => {\n   63          set(this, 'editElement.category', category);\n   64        });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/element-scene-display.js:\n   18      return isPresent(elementScene)\n   19        ? elementScene\n   20:       : this.store.createRecord('elementScene', { element, scene });\n   21    }),\n   22  \n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/scene-data-modal.js:\n   28      } else {\n   29        let script = this.script;\n   30:       let scene = this.store.createRecord('scene', { script });\n   31        set(this, 'scene', scene);\n   32      }\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/scene-list-item.js:\n   25      return isPresent(elementScene)\n   26        ? elementScene\n   27:       : this.store.createRecord('elementScene', { element, scene });\n   28    }),\n   29    toggleEditState() {\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-display.js:\n  100      set(this, 'lineIds', null);\n  101    },\n  102:   _createNewAndClearParams(createdClass, params) {\n  103:     if (createdClass === 'tag') {\n  104:       this.createNewTag(params);\n  105      } else {\n  106        return;\n  ...\n  118      set(this, 'addingShot', true);\n  119    },\n  120:   openNewlyCreatedShot(shot) {\n  121      this.closeNewShotPopover();\n  122      this.showNewShot(shot);\n  ...\n  182          lineIds: this.lineIds\n  183        };\n  184:       this._createNewAndClearParams('tag', params);\n  185      },\n  186      dragStart(secondPageScene, allPageScenes, pageSceneIndex, ev) {\n  ...\n  199          firstPageScene = this.store.peekRecord('page-scene', firstPageSceneId);\n  200        } else {\n  201:         firstPageScene = Object.create(null);\n  202        }\n  203        let secondPageScene = this.store.peekRecord(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-line.js:\n   72        }\n   73      });\n   74:     let lineArray = this._createLineArray(lineText);\n   75      set(this, 'creatingTerm', null);\n   76      return lineArray;\n   ..\n  159      };\n  160    },\n  161:   _createLineArray(line) {\n  162      const lineBreaker = /{(.*?)}/g;\n  163      let returnLine = line\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-selection.js:\n   79  \n   80    _isBackwards(selection) {\n   81:     let range = document.createRange();\n   82      range.setStart(selection.anchorNode, selection.anchorOffset);\n   83      range.setEnd(selection.focusNode, selection.focusOffset);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/scripts-drop-zone.js:\n    7      return false;\n    8    },\n    9:   createDropzone(element) {\n   10      let region =\n   11        this.get('maxDropRegion') && typeof FastBoot === 'undefined'\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/shot-form.js:\n   61      let label = this.vfxAssetSearchText;\n   62      let script = this.shot.script;\n   63:     return this.store.createRecord('element', {\n   64        category: this.vfxCategory,\n   65        label,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/projects/index.js:\n    5  export default Controller.extend({\n    6    queryParams: ['search', 'sort'],\n    7:   sort: 'createdAt',\n    8    search: '',\n    9    projectsExist: computed('model', function() {\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show.js:\n  274        set(this, 'showEditCategory', true);\n  275      },\n  276:     transitionToCreateNewTag(newElementParams) {\n  277        this.transitionToRoute('scripts.script.show.add-element', this.script, {\n  278          queryParams: newElementParams\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/add-element.js:\n   98          }\n   99          this.showController.send('setActiveElement', model);\n  100:         message = 'Your element was created successfully!';\n  101          messageStatus = 'success';\n  102        } else {\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/sides/settings.js:\n   33    },\n   34  \n   35:   async createSides() {\n   36      if (isEmpty(this.title)) {\n   37        set(this, 'titleError', this.intl.t('scripts.title-error-text'));\n   ..\n   46        .join(',');\n   47  \n   48:     let sides = this.store.createRecord('sides', {\n   49        script: this.script,\n   50        selectedSceneDisplayNumbers,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/metrics-adapters/gtag.js:\n   24  \n   25      // Load gtag\n   26:     let gtagScript = document.createElement('script');\n   27      gtagScript.async = true;\n   28      gtagScript.src = `https://www.googletagmanager.com/gtag/js?id=${id}`;\n   ..\n   31      // Configure gtag\n   32      let scriptContents = `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', '${id}');`;\n   33:     let configSript = document.createElement('script');\n   34      configSript.text = scriptContents;\n   35      document.body.appendChild(configSript);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/mixins/scene-modifier-functions.js:\n    5  import { isEmpty, isPresent } from '@ember/utils';\n    6  \n    7: export default Mixin.create({\n    8    // Async Tasks\n    9    saveNewSceneTask: task(function*() {\n   ..\n   40      }\n   41    }),\n   42:   _createNewPageSceneAndUpdateLines: task(function*(\n   43      oldPageScene,\n   44      scene,\n   ..\n   48      let page = yield oldPageScene.get('page');\n   49      let pageDirection = draggingDown ? -1 : 1;\n   50:     let pageScene = this.store.createRecord('pageScene', {\n   51        page,\n   52        scene,\n   ..\n  128            secondPageScene\n  129          );\n  130:         // Second we create a new pageScene on the previous page and update the lines.\n  131:         yield this._createNewPageSceneAndUpdateLines.perform(\n  132            get(destinationLine, 'pageScene'),\n  133            get(secondPageScene, 'scene'),\n  ...\n  153          yield this._updateLinesPageScene.perform(linesToChange, firstPageScene);\n  154          // Now we need to update all the appropriate lines on the next page\n  155:         yield this._createNewPageSceneAndUpdateLines.perform(\n  156            get(destinationLine, 'pageScene'),\n  157            get(firstPageScene, 'scene'),\n  ...\n  182      pageScenesToUpdate.forEach((ps, index) => {\n  183        if (index === 0) {\n  184:         this._createNewPageSceneAndUpdateLines.perform(ps, scene, activeLine);\n  185        } else {\n  186          set(ps, 'scene', scene);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/mixins/script-options.js:\n    2  import Mixin from '@ember/object/mixin';\n    3  \n    4: export default Mixin.create({\n    5    versions: [\n    6      'None',\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/script.js:\n  109        .then(response => response.blob())\n  110        .then(blob => {\n  111:         let url = window.URL.createObjectURL(blob);\n  112:         let a = document.createElement('a');\n  113          a.href = url;\n  114          a.download = `${this.fileName.replace(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/sides.js:\n    8    script: belongsTo({ async: false }),\n    9  \n   10:   createdAt: attr('date'),\n   11    googleDriveId: attr('string'),\n   12    selectedSceneNumbers: attr('string'),\n   ..\n   30        .then(response => response.blob())\n   31        .then(blob => {\n   32:         let url = window.URL.createObjectURL(blob);\n   33:         let a = document.createElement('a');\n   34          a.href = url;\n   35          a.download = `${this.title}.pdf`;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/script/show/add-category.js:\n    3  export default Route.extend({\n    4    model() {\n    5:     return this.store.createRecord('category');\n    6    },\n    7    setupController(controller, model) {\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/script/show/add-element.js:\n   16        tag = this.store.peekRecord('tag', params.tagId);\n   17        let category = tag.get('element.category');\n   18:       newElement = this.store.createRecord('element', { category, script });\n   19        tag.set('element', newElement);\n   20      } else {\n   21:       tag = this.store.createRecord('tag', params);\n   22        if (params.lineIds) {\n   23          let lines = params.lineIds\n   ..\n   38        let defaultLabel = params.value || '';\n   39  \n   40:       newElement = this.store.createRecord('element', {\n   41          category,\n   42          label: defaultLabel.replace(/\\n/g, ' '),\n   ..\n   68  \n   69      if (isEmpty(elementScene)) {\n   70:       elementScene = this.store.createRecord('element-scene', { scene });\n   71      }\n   72      controller.set('newElement', model.newElement);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/app.css:\n   57  @import \"modules/select-scenes-modal\";\n   58  @import \"modules/sides-settings-modal\";\n   59: @import \"modules/sides-created-modal\";\n   60  @import \"modules/form-field-tag\";\n   61  @import \"prodicle-universal-help-tool\";\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/breakdown-categories.css:\n   12  }\n   13  \n   14: .breakdown-category--create {\n   15    margin-top: 6px;\n   16    height: 40px;\n   17  }\n   18  \n   19: .breakdown-category__create-button {\n   20    padding: .625em 8px;\n   21    display: flex;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/dashboard.css:\n  165  }\n  166  \n  167: /* Title links create a tap target that fills the entire row, so other cells with interactive elements are elevated for clicks/taps to prevent accidental title link clicks/taps. */\n  168  .dashboard-table__interactive-cell {\n  169    position: relative;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/header.css:\n   47  }\n   48  \n   49: /* TODO UXD: create PCC ticket to handle adding a new class to `.prodicle-header__action-button``\n   50  Currently we can't overwrite the size of the brand icon\n   51  These temporary styles can be adjusted when https://jira.netflix.com/browse/PCORE-459 is completed */\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/sides-created-modal.css:\n    1: .sides-created-modal__content {\n    2  \n    3    .prodicle-modal--fullscreen & {\n    .\n    6  }\n    7  \n    8: .sides-created-modal__content__illustration {\n    9    margin-bottom: 0;\n   10    fill: var(--color-theme-success);\n   11  }\n   12  \n   13: .sides-created-modal__spinner {\n   14    margin-top: 48px;\n   15    margin-bottom: 32px;\n   16  }\n   17  \n   18: .sides-created-copy {\n   19    text-align: center;\n   20  }\n   21  \n   22: .sides-created-copy__caption {\n   23    color: var(--color-g-secondary-gray);\n   24  }\n   25  \n   26: .sides-created-modal__content__actions {\n   27    .prodicle-modal--fullscreen & {\n   28      margin-top: 60px;\n   ..\n   30  }\n   31  \n   32: .sides-created-modal__action__icon {\n   33:   .sides-created-modal__action & {\n   34      padding-left: 8px;\n   35      width: 40px;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/sides-settings-modal.css:\n   15  \n   16  .sides-settings-edit-scenes {\n   17:   /* recreate P|CC icon button on this icon link */\n   18    display: flex;\n   19    flex-direction: column;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/add-shot.hbs:\n   82            data-test-save-new-shot-button\n   83            @label={{t \"scripts.add-shot-text\"}}\n   84:           @onclick={{perform createShot}}\n   85            @size=\"small\"\n   86          />\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/scene-header-edit-modal.hbs:\n  112                <div class=\"prodicle-form-field-duo__half prodicle-form-field-duo__half--small\">\n  113                  <label class=\"t-hidden\" for=\"breakdownScriptSceneEditSceneLengthPages\">{{t \"script.scene-data-modal.scene-length.pages.label\"}}</label>\n  114:                 {{!-- TODO ENG: create field for Pages --}}\n  115:                 {{!-- TODO ENG: create oninput and value methods --}}\n  116                  <ProdicleFormInput\n  117                    @name=\"breakdownScriptSceneEditSceneLengthPages\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-display.hbs:\n   77        @closeShotModal={{action this.closeNewShotPopover}}\n   78        @clearShotParams={{action this.clearParams}}\n   79:       @openNewShot={{action this.openNewlyCreatedShot}}\n   80      />\n   81    {{/if}}\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-table.hbs:\n  118            <ProdicleTooltip\n  119              @position=\"bottom\"\n  120:             @content={{t \"scripts.create-sides-text\"}}\n  121              @class=\"dashboard-table__row__icon-sides\"\n  122              as |tooltipId|>\n  ...\n  126                aria-describedby=tooltipId\n  127                class=\"prodicle-button-icon prodicle-button-icon--light\"\n  128:               data-test-create-sides=script.id\n  129              }}\n  130                {{svg-jar \"icons/icon-sides\" class=\"prodicle-button-icon__icon\"}}\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/sides-list.hbs:\n   22        />\n   23        <head.cell\n   24:         @content={{t \"scripts.created-at-text\"}}\n   25:         @cellId=\"createdAt\"\n   26        />\n   27        <span class=\"t-hidden\" role=\"columnheader\">\n   ..\n   89            >\n   90              <span class=\"t-caption prodicle-table__cell__mobile-heading\" aria-hidden=\"true\">\n   91:               {{t \"scripts.created-at-text\"}}\n   92              </span>\n   93  \n   94              <span \n   95                class=\"t-body-small prodicle-table__cell__datum\"\n   96:               data-test-sides-created-at={{sidesRecord.id}}\n   97              >\n   98:               {{moment-from sidesRecord.createdAt}}\n   99              </span>\n  100            </row.cell>\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/projects/index.hbs:\n   18              id=\"filterProjectsInput\"\n   19            >\n   20:             <option value=\"createdAt\" selected={{eq sort \"createdAt\"}}>\n   21                {{t \"scripts.sort-recent\"}}\n   22              </option>\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/show.hbs:\n  159            \"scripts.script.sides.select-scenes\"\n  160            class=\"prodicle-button-outlined prodicle-button-outlined--small\"\n  161:           data-test-create-sides=\"\"\n  162          }}\n  163            {{svg-jar\n  ...\n  166            }}\n  167            <span class=\"prodicle-button-outlined__text\">\n  168:             {{t \"scripts.create-sides-text\"}}\n  169            </span>\n  170          {{/link-to}}\n  ...\n  300                      </span>\n  301                      {{svg-jar\n  302:                       \"icons/icon-create\"\n  303                        class=\"breakdown-category-header__trigger__icon\"\n  304                        aria-hidden=\"true\"\n  ...\n  342                  openCategoryOptions=(action \"openCategoryEdit\")\n  343                  toggleCombinedElement=(action \"toggleCombinedElement\")\n  344:                 createNewElement=(action \"transitionToNewElement\")\n  345                  setOpenInstance=(action \"openInstanceView\")\n  346                  closeInstanceView=(action \"closeInstanceView\")\n  ...\n  350            {{/if}}\n  351            {{#unless isShots}}\n  352:             <div class=\"breakdown-category breakdown-category--create\">\n  353                {{#if activeScene}}\n  354                  <button\n  355:                   class=\"breakdown-category__create-button\"\n  356:                   data-test-create-element-from-breakdown-editor\n  357                    onclick={{action \"transitionToNewElement\" \"\" activeScene}}\n  358                  >\n  359:                   <span class=\"breakdown-category__create-button__text\">\n  360                      {{t \"scripts.script.net-element.header\"}}\n  361                    </span>\n  ...\n  363                {{else}}\n  364                  <button\n  365:                   class=\"breakdown-category__create-button\"\n  366                    onclick={{action \"transitionToNewCategory\"}}\n  367:                   data-test-button=\"create-category\"\n  368                  >\n  369:                   <span class=\"breakdown-category__create-button__text\">\n  370                      {{t \"scripts.script.add-new-category\"}}\n  371                    </span>\n  ...\n  422          setActiveScene=(action \"setActiveScene\")\n  423          openInSidePanel=(action \"openInSidePanel\")\n  424:         createNewTag=(action \"transitionToCreateNewTag\")\n  425          showNewShot=(action \"showNewShot\")\n  426          currentPage=currentPage\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/sides/settings.hbs:\n  126        {{/link-to}}\n  127        <ProdicleButtonFilled\n  128:         @label={{t \"scripts.create-sides-text\"}}\n  129          @class=\"prodicle-modal__footer__action\"\n  130:         @onclick={{action createSides}}\n  131:         data-test-create-sides=\"\"\n  132        />\n  133      </div>\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/sides/show.hbs:\n    4  <ProdicleModal\n    5    @size=\"fullscreen\"\n    6:   class=\"sides-created-modal\"\n    7    @focusCloseButton=\"true\"\n    8    @onClose={{action \"goToSidesList\"}}\n    9    as |modal|>\n   10    <modal.content\n   11:     @class=\"sides-created-modal__content\">\n   12      {{#if isCreating}}\n   13        <ProdicleLoadingSpinner\n   14:         class=\"sides-created-modal__spinner\"/>\n   15        <h1 data-test-sides-is-creating-header class=\"prodicle-modal__content__heading t-banner\">\n   16:         {{t \"scripts.scripts.script.sides.created.is-creating.heading\"}}\n   17        </h1>\n   18      {{else}}\n   19        <ProdicleIllustration\n   20          @svg=\"icons/icon-banner-success\"\n   21:         class=\"prodicle-illustration--light prodicle-illustration--large prodicle-modal__content__illustration sides-created-modal__content__illustration\"\n   22        />\n   23:       <h1 data-test-sides-created-header class=\"prodicle-modal__content__heading t-banner\">\n   24:         {{t \"scripts.scripts.script.sides.created.heading\"}}\n   25        </h1>\n   26      {{/if}}\n   27:     <p class=\"sides-created-copy\">\n   28        {{#if isCreating}}\n   29:         <span class=\"t-caption sides-created-copy__caption\">\n   30:           {{t \"scripts.scripts.script.sides.created.caption\"}}\n   31          </span>\n   32        {{else}}\n   ..\n   35              {{sides.title}}.pdf\n   36            </a>\n   37:           {{t \"scripts.scripts.script.sides.created.copy\"}}\n   38          </span>\n   39        {{/if}}\n   40      </p>\n   41:     <modal.actions @class=\"sides-created-modal__content__actions\">\n   42        {{#if isCreating}}\n   43          {{#link-to \"scripts\" data-test-link-back-to-scripts=\"\" class=\"t-body t-link\"}}\n   44:           {{t \"scripts.scripts.script.sides.created.actions.return\"}}\n   45          {{/link-to}}\n   46        {{else}}\n   47          <a href={{sendToDistroLink}}\n   48            data-test-send-to-distro\n   49:           class=\"prodicle-button-outlined prodicle-button-outlined--large prodicle-modal__content__action sides-created-modal__action\"\n   50          >\n   51            {{svg-jar\n   52              \"icons/prodicle/icon-distribution-square\"\n   53              data-test-button-icon=true\n   54:             class=\"prodicle-button-outlined__icon sides-created-modal__action__icon\"\n   55            }}\n   56            <span data-test-button-label=\"\" class=\"prodicle-button-outlined__text\">\n   ..\n   60          {{#link-to\n   61            params=backRoute\n   62:           class=\"prodicle-button-outlined prodicle-button-outlined--large prodicle-modal__content__action sides-created-modal__action__icon\"\n   63            data-test-link=\"go to sides list\"\n   64          }}\n   ..\n   66              \"icons/prodicle/icon-scripts-square\"\n   67              data-test-button-icon=true\n   68:             class=\"prodicle-button-outlined__icon sides-created-modal__action__icon\"\n   69            }}\n   70            <span data-test-button-label=\"\" class=\"prodicle-button-outlined__text\">\n   71:             {{t \"scripts.scripts.script.sides.created.actions.view-sides\"}}\n   72            </span>\n   73          {{/link-to}}\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/utils/drive-upload-widget.js:\n   35    if (authResult && !authResult.error) {\n   36      oauthToken = authResult.access_token;\n   37:     createPicker();\n   38    } else if (authResult.error === 'popup_blocked_by_browser') {\n   39      set(callingController, 'popupsBlocked', true);\n   ..\n   41  }\n   42  \n   43: function createPicker() {\n   44    if (pickerApiLoaded && oauthToken) {\n   45      let view = new google.picker.View(google.picker.ViewId.DOCS);\n   ..\n   58  }\n   59  \n   60: function createTempFile(data, projectId) {\n   61    let fileId = data.docs[0].id;\n   62    return fetch(`/api/google_drive_files/${fileId}/uploads`, {\n   ..\n   77      set(callingController, 'isUploading', true);\n   78      let projectId = callingController.upload.projectId;\n   79:     createTempFile(data, projectId)\n   80        .then(response => {\n   81          if (response.ok) return response.json();\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/config/environment.js:\n   35      APP: {\n   36        // Here you can pass flags/options to your application instance\n   37:       // when it is created\n   38      },\n   39  \n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/test-helper.js:\n    4  import { start } from 'ember-qunit';\n    5  \n    6: setApplication(Application.create(config.APP));\n    7  \n    8  start();\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/projects-test.js:\n   64  \n   65    test('The list of adhoc scripts can be filtered', async function(assert) {\n   66:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   67  \n   68:     let scriptA = this.server.create('script', { title: 'asdfA' });\n   69:     let scriptB = this.server.create('script', { title: 'qwerA' });\n   70:     let scriptC = this.server.create('script', { title: 'qwerB' });\n   71  \n   72      await visit(`/scripts/ad-hoc`);\n   ..\n  138  \n  139    test('The list of project scripts can be filtered', async function(assert) {\n  140:     let project = this.server.create('project');\n  141:     let scriptA = this.server.create('script', { project, title: 'asdfA' });\n  142:     let scriptB = this.server.create('script', { project, title: 'qwerA' });\n  143:     let scriptC = this.server.create('script', { project, title: 'qwerB' });\n  144  \n  145      await visit(`/scripts/projects/${project.id}`);\n  ...\n  170  \n  171    test('The list of project scripts are filtered with case insensitivity', async function(assert) {\n  172:     let project = this.server.create('project');\n  173:     let scriptA = this.server.create('script', { project, title: 'asdfA' });\n  174:     let scriptB = this.server.create('script', { project, title: 'qwerA' });\n  175:     let scriptC = this.server.create('script', { project, title: 'qwerB' });\n  176  \n  177      await visit(`/scripts/projects/${project.id}`);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/script-information-test.js:\n   66  \n   67    test('users can fill out information about an upload', async function(assert) {\n   68:     let script = this.server.create('script');\n   69  \n   70      await visit(`/scripts/upload/${script.id}/script-information`);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/script-test.js:\n   31  \n   32  function selectElementContents(el) {\n   33:   let range = document.createRange();\n   34    range.selectNodeContents(el);\n   35    let sel = window.getSelection();\n   ..\n  320    });\n  321  \n  322:   test('can create a new category with a color and the title is normalized', async function(assert) {\n  323      this.server.get('/api/scripts', function() {\n  324        return project_scripts;\n  ...\n  334      assert.dom('[data-test-list-item]').exists({ count: 4 });\n  335      await click(\n  336:       '.breakdown-category--create [data-test-button=\"create-category\"]'\n  337      );\n  338      await fillIn(\n  ...\n  348    });\n  349  \n  350:   test('cannot create a new category with the same title as an existing title', async function(assert) {\n  351      this.server.get('/api/scripts', function() {\n  352        return project_scripts;\n  ...\n  359      assert.dom('[data-test-list-item]').exists({ count: 4 });\n  360      await click(\n  361:       '.breakdown-category--create [data-test-button=\"create-category\"]'\n  362      );\n  363      await fillIn('[data-test-prodicle-modal] [data-test-form-input]', 'person');\n  ...\n  533    });\n  534  \n  535:   test('When we have an active scene we have the option to create a new element', async function(assert) {\n  536      this.server.get('/api/scripts', function() {\n  537        return scripts;\n  ...\n  547      });\n  548      await visit('/scripts/script/115?activeSceneId=2');\n  549:     assert.dom('[data-test-create-element-from-breakdown-editor]').exists();\n  550:     assert.dom('[data-test-button=\"create-category\"]').doesNotExist();\n  551:     await click('[data-test-create-element-from-breakdown-editor]');\n  552      assert.equal(\n  553        currentURL(),\n  ...\n  606      await visit('/scripts/script/115?activeSceneId=1');\n  607  \n  608:     // Create a shot from the first half of the line's text\n  609      let numberOfCharactersToRemoveFromHighlight = 30;\n  610      await highlightPartOfLine(\n  ...\n  619      assert.dom('[data-test-shot-li]').exists({ count: 1 });\n  620  \n  621:     // Create a shot from the last word of the line's text\n  622      numberOfCharactersToRemoveFromHighlight = 56;\n  623      highlightPartOfLine(\n  ...\n  640      assert\n  641        .dom('[data-scene-line-number=\"1\"] [data-test-highlight]')\n  642:       .exists({ count: 2 }, 'New shot successfully created');\n  643    });\n  644  \n  645:   test('when creating a shot/tag which includes a space and neighbors another shot/tag, no empty shots/tags are created (which cause a loss of space between words).', async function(assert) {\n  646      let activeSceneId = 2;\n  647      let lineNumberToHighlight = 3;\n  ...\n  662      await visit(`/scripts/script/115?activeSceneId=${activeSceneId}`);\n  663  \n  664:     // Create a tag from the first two words of the line\n  665      numberOfCharactersToRemoveFromHighlight = 26;\n  666      await highlightPartOfLine(\n  ...\n  673      await click('[data-test-button=\"save-button\"]');\n  674  \n  675:     // Create a tag that neighbors the previous tag\n  676      numberOfCharactersToRemoveFromHighlight = 13;\n  677      highlightPartOfLine(\n  ...\n  687          `[data-scene-number=\"${activeSceneId}\"] [data-scene-line-number=\"${lineNumberToHighlight}\"] [data-test-highlight]`\n  688        )\n  689:       .exists({ count: 2 }, 'exactly two tags created');\n  690    });\n  691  \n  692:   test('When we do not have an active scene we have the option to create a new category', async function(assert) {\n  693      this.server.get('/api/scripts', function() {\n  694        return scripts;\n  ...\n  705      await visit('/scripts/script/115');\n  706      assert\n  707:       .dom('[data-test-create-element-from-breakdown-editor]')\n  708        .doesNotExist();\n  709:     assert.dom('[data-test-button=\"create-category\"]').exists();\n  710:     await click('[data-test-button=\"create-category\"]');\n  711      assert.equal(currentURL(), '/scripts/script/115/add-category');\n  712    });\n  ...\n  758        let container = document.querySelector('.script-display-element');\n  759  \n  760:       await createNewElement(container, lineText, 'Foo');\n  761        await click('[data-test-remove-element]');\n  762:       await createNewElement(container, lineText, 'Foo');\n  763  \n  764        assert.verifySteps(\n  ...\n  769  \n  770      test('we can add an element in text', async function(assert) {\n  771:       let allAdhocRoles = EmberObject.create({\n  772          id: 4,\n  773          vfxEditor: true,\n  ...\n  873      });\n  874  \n  875:     test('Create new category from add element modal', async function(assert) {\n  876        this.server.get('/api/scripts', () => project_scripts);\n  877        this.server.get('/api/scripts/:script_id', () => project_script);\n  ...\n  880          assert.equal(data.attributes.title, 'New Category Title');\n  881          assert.equal(data.relationships.script.data.id, '115');\n  882:         assert.step('category created');\n  883          return generateFakeId(request.requestBody);\n  884        });\n  ...\n  897  \n  898        assert.verifySteps(\n  899:         ['category created'],\n  900:         'a new category is created when a user clicks on it in the typeahead'\n  901        );\n  902        assert.expect(5);\n  ...\n  990        await click('[data-test-scene-number=\"2\"]');\n  991        await click('[data-test-sidenav-category=\"PICTURE_VEHICLE\"]');\n  992:       await click('[data-test-create-element-from-breakdown-editor]');\n  993        assert.equal(\n  994          currentURL(),\n  ...\n 1409      });\n 1410  \n 1411:     test('Clicking a newly created tag that is the only tag in a category opens the inline editor', async function(assert) {\n 1412        this.server.get('/api/scripts', () => scripts);\n 1413        this.server.get('/api/scripts/:script_id', () => project_script);\n ....\n 1681    module('Adhoc Settings', function() {\n 1682      test('Selects elements tab if user turns off their VFX Editor Adhoc Role', async function(assert) {\n 1683:       let allAdhocRoles = EmberObject.create({\n 1684          id: 4,\n 1685          vfxEditor: true,\n ....\n 1719  \n 1720      test('Selects shots if user turns off their Element Editor Adhoc Role', async function(assert) {\n 1721:       let allAdhocRoles = EmberObject.create({\n 1722          id: 4,\n 1723          vfxEditor: true,\n ....\n 1851      test('We can request an animation report from the export screen', async function(assert) {\n 1852        stubService('current-user', netflixCurrentUser);\n 1853:       let allAdhocRoles = EmberObject.create({\n 1854          id: 4,\n 1855          vfxEditor: true,\n ....\n 1907  \n 1908      test('We can request a production report from the export screen', async function(assert) {\n 1909:       let allAdhocRoles = EmberObject.create({\n 1910          id: 4,\n 1911          vfxEditor: true,\n ....\n 1995  });\n 1996  \n 1997: const createNewElement = async (container, lineText, label) => {\n 1998    await selectElementContents(lineText);\n 1999    await triggerEvent(container, 'mouseup', []);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/shots-test.js:\n    9  \n   10    test('Multi-line shots only have opening and closing handles', async function(assert) {\n   11:     let script = this.server.create('script', { parsedState: 'complete' });\n   12:     let scene = this.server.create('scene', { sceneNumber: 1, script });\n   13:     let page = this.server.create('page', { pageNumber: 0, script });\n   14  \n   15:     let pageScene = this.server.create('pageScene', {\n   16        page,\n   17        pageOrder: 0,\n   ..\n   20      });\n   21  \n   22:     let lineA = this.server.create('line', { pageScene, text: 'eeeeee hi' });\n   23:     let lineB = this.server.create('line', { pageScene, text: 'yi ooooooo' });\n   24  \n   25:     this.server.create('shot', {\n   26        isActive: true,\n   27        value: 'hi\\nyi',\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/sides-scene-selection-test.js:\n   14  \n   15    test(`User can see script's scenes`, async function(assert) {\n   16:     let script = createScript(this.server);\n   17:     let sceneA = this.server.create('scene', {\n   18        displaySceneNumber: '12B',\n   19        script,\n   20        sceneDescription: '12B is the good part'\n   21      });\n   22:     let sceneB = this.server.create('scene', {\n   23        displaySceneNumber: '13B',\n   24        script,\n   25        sceneDescription: '13B is the good part'\n   26      });\n   27:     let sceneC = this.server.create('scene', {\n   28        displaySceneNumber: '13C',\n   29        script,\n   ..\n   57  \n   58    test('User can select scenes', async function(assert) {\n   59:     let script = createScript(this.server);\n   60:     let sceneA = this.server.create('scene', { script });\n   61  \n   62      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n   ..\n   72  \n   73    test('Next button disabled until a scene is selected', async function(assert) {\n   74:     let script = createScript(this.server);\n   75:     let sceneA = this.server.create('scene', { script });\n   76  \n   77      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n   ..\n   89  \n   90    test('User can de-select scenes from list', async function(assert) {\n   91:     let script = createScript(this.server);\n   92:     let sceneA = this.server.create('scene', {\n   93        displaySceneNumber: '123ABC',\n   94        script\n   ..\n  116  \n  117    test('User can de-select scenes from typeahead', async function(assert) {\n  118:     let script = createScript(this.server);\n  119:     let sceneA = this.server.create('scene', {\n  120        displaySceneNumber: '123ABC',\n  121        script\n  ...\n  151  \n  152    test('User can search and select scene in typeahead', async function(assert) {\n  153:     let script = createScript(this.server);\n  154:     let sceneA = this.server.create('scene', {\n  155        displaySceneNumber: '12B',\n  156        script,\n  157        sceneDescription: '12B is the good part'\n  158      });\n  159:     this.server.create('scene', {\n  160        displaySceneNumber: '13B',\n  161        script,\n  162        sceneDescription: '13B is the good part'\n  163      });\n  164:     this.server.create('scene', {\n  165        displaySceneNumber: '13C',\n  166        script,\n  ...\n  190  \n  191    test('Selected scenes do not appear in typeahead results', async function(assert) {\n  192:     let script = createScript(this.server);\n  193:     let sceneA = this.server.create('scene', {\n  194        displaySceneNumber: '12B',\n  195        script,\n  ...\n  213  \n  214    test('User can exit scene selection by clicking cancel', async function(assert) {\n  215:     let script = createScript(this.server);\n  216  \n  217      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  226  \n  227    test('User can exit scene selection by clicking close button', async function(assert) {\n  228:     let script = createScript(this.server);\n  229  \n  230      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  239  \n  240    test('If user selects scenes then navigates away from page then selected scenes should be deselected', async function(assert) {\n  241:     let script = createScript(this.server);\n  242:     let sceneA = this.server.create('scene', { script });\n  243  \n  244      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  258  \n  259    test(`User can see script's scene count`, async function(assert) {\n  260:     let script = createScript(this.server);\n  261:     this.server.createList('scene', 3, { script });\n  262  \n  263      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  269  \n  270    test(`Scenes are ascendingly ordered by scene number`, async function(assert) {\n  271:     let script = createScript(this.server);\n  272:     let sceneA = this.server.create('scene', {\n  273        displaySceneNumber: '12B',\n  274        sceneNumber: 300,\n  275        script\n  276      });\n  277:     let sceneB = this.server.create('scene', {\n  278        displaySceneNumber: '13B',\n  279        sceneNumber: 200,\n  280        script\n  281      });\n  282:     let sceneC = this.server.create('scene', {\n  283        displaySceneNumber: '13C',\n  284        sceneNumber: 100,\n  ...\n  306  \n  307    test('User can select all scenes', async function(assert) {\n  308:     let script = createScript(this.server);\n  309:     this.server.createList('scene', 12, { script });\n  310  \n  311      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  320  \n  321    test('User can de-select all scenes', async function(assert) {\n  322:     let script = createScript(this.server);\n  323:     this.server.createList('scene', 12, { script });\n  324  \n  325      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  335    });\n  336  \n  337:   const createScript = server => {\n  338:     return server.create('script', { title: 'the best script' });\n  339    };\n  340  });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/sides-settings-test.js:\n   14  \n   15    test(`User can see selected scenes`, async function(assert) {\n   16:     let script = this.server.create('script', { title: 'the best script' });\n   17:     let sceneA = this.server.create('scene', {\n   18        displaySceneNumber: '12B',\n   19        script,\n   ..\n   21        sceneDescription: '12B is the good part'\n   22      });\n   23:     let sceneB = this.server.create('scene', {\n   24        displaySceneNumber: '13B',\n   25        script,\n   ..\n   27        sceneDescription: '13B is the good part'\n   28      });\n   29:     let sceneC = this.server.create('scene', {\n   30        displaySceneNumber: '13C',\n   31        script,\n   ..\n   60    });\n   61  \n   62:   test('user creates sides record', async function(assert) {\n   63:     let script = this.server.create('script', { title: 'the best script' });\n   64:     let sceneA = this.server.create('scene', {\n   65        displaySceneNumber: '12B',\n   66        script,\n   67        sceneNumber: 1\n   68      });\n   69:     let sceneB = this.server.create('scene', {\n   70        displaySceneNumber: '13B',\n   71        script,\n   72        sceneNumber: 2\n   73      });\n   74:     let sceneC = this.server.create('scene', {\n   75        displaySceneNumber: '13C',\n   76        script,\n   ..\n   92      assert.dom('[data-test-overflow-svg=\"true\"]').hasClass('is-crossed-out');\n   93  \n   94:     await click('[data-test-create-sides]');\n   95  \n   96      let sides = this.server.schema.sides.first();\n   97:     assert.ok(sides, 'sides record created');\n   98      assert.equal(sides.title, 'the new sides', 'title saved');\n   99      assert.equal(\n  ...\n  119  \n  120    test('user cancels sides creation', async function(assert) {\n  121:     let script = this.server.create('script', { title: 'the best script' });\n  122:     let sceneA = this.server.create('scene', { script });\n  123  \n  124      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  135  \n  136    test('user clicks back button', async function(assert) {\n  137:     let script = this.server.create('script', { title: 'the best script' });\n  138:     let sceneA = this.server.create('scene', { script });\n  139  \n  140      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n  ...\n  151  \n  152    test('user clicks escape button', async function(assert) {\n  153:     let script = this.server.create('script', { title: 'the best script' });\n  154:     let sceneA = this.server.create('scene', { script });\n  155  \n  156      await visit(`/scripts/script/${script.id}/sides/select-scenes`);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/sides-test.js:\n   18  \n   19    test('Users can visit a sides show page', async function(assert) {\n   20:     logInAs(this.server.create('user'), this.server);\n   21:     let script = this.server.create('script', { title: 'the best script' });\n   22:     let sides = this.server.create('sides', {\n   23:       createdAt: moment(),\n   24        script,\n   25        selectedSceneDisplayNumbers: '1A, 3, 4z',\n   ..\n   37  \n   38      assert\n   39:       .dom('[data-test-sides-created-header]')\n   40        .exists(\n   41:         'If sides already have a googleDriveId we show the already created content.'\n   42        );\n   43      assert\n   ..\n   47  \n   48    test('Sides-list \"Send to Distro\" anchor has intended href', async function(assert) {\n   49:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   50  \n   51      let buttonToOpenSidesMenu = '[data-test-sides-action-menu-trigger]';\n   52:     let script = this.server.create('script', { title: 'the best script' });\n   53:     let sides = this.server.create('sides', {\n   54:       createdAt: moment(),\n   55        script,\n   56        selectedSceneDisplayNumbers: '1A, 3, 4z',\n   ..\n   69  \n   70    test('Sides show page \"Send to Distro\" link updates sides id as intended', async function(assert) {\n   71:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n   72  \n   73:     let script = this.server.create('script', { title: 'the best script' });\n   74:     let firstSides = this.server.create('sides', {\n   75:       createdAt: moment(),\n   76        script,\n   77        selectedSceneDisplayNumbers: '1A, 3, 4z',\n   ..\n   79        title: 'sidesABC123'\n   80      });\n   81:     let secondSides = this.server.create('sides', {\n   82:       createdAt: moment(),\n   83        script,\n   84        selectedSceneDisplayNumbers: '1A, 3, 4z',\n   ..\n  111  \n  112    test('Scripts list shows filter input, sides list does not.', async function(assert) {\n  113:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  114:     let script = this.server.create('script', { title: 'the best script' });\n  115:     this.server.create('sides', {\n  116:       createdAt: moment(),\n  117        script,\n  118        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  133  \n  134    test('When a user is viewing sides for an adhoc script, clicking view sides goes to adHoc side page', async function(assert) {\n  135:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  136:     let script = this.server.create('script', { title: 'the best script' });\n  137:     let sides = this.server.create('sides', {\n  138:       createdAt: moment(),\n  139        script,\n  140        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  169  \n  170    test(\"When a user is viewing sides for a script for a project, clicking view sides goes to project's side page\", async function(assert) {\n  171:     logInAs(this.server.create('user'), this.server);\n  172:     let project = this.server.create('project');\n  173:     let script = this.server.create('script', {\n  174        title: 'the best script',\n  175        projectId: project.id\n  176      });\n  177:     let sides = this.server.create('sides', {\n  178:       createdAt: moment(),\n  179        script,\n  180        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  201  \n  202    test('Users can visit a sides show page if the sides are not completed loading and they will see the loading copy', async function(assert) {\n  203:     logInAs(this.server.create('user'), this.server);\n  204:     let script = this.server.create('script', { title: 'the best script' });\n  205:     let sides = this.server.create('sides', {\n  206:       createdAt: moment(),\n  207        script,\n  208        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  227        .dom('[data-test-link-back-to-scripts]')\n  228        .exists(\n  229:         'Back to scripts linke exists if the sides are still being created.'\n  230        );\n  231    });\n  232  \n  233    test('Users can view a project sides', async function(assert) {\n  234:     logInAs(this.server.create('user'), this.server);\n  235  \n  236:     let project = this.server.create('project');\n  237:     let script = this.server.create('script', {\n  238        title: 'the best script',\n  239        project\n  240      });\n  241:     let sides = this.server.create('sides', {\n  242:       createdAt: moment(),\n  243        script,\n  244        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  260        .hasText(sides.selectedSceneDisplayNumbers, 'sides scenes displayed');\n  261      assert\n  262:       .dom(`[data-test-sides-created-at=\"${sides.id}\"]`)\n  263        .hasText('a few seconds ago', 'sides creation timestamp displayed');\n  264    });\n  265  \n  266    test(`Users can begin creating sides from a project's scripts list`, async function(assert) {\n  267:     logInAs(this.server.create('user'), this.server);\n  268  \n  269:     let project = this.server.create('project');\n  270:     let script = this.server.create('script', { project, title: 'script123' });\n  271  \n  272      await visit(`/scripts/projects/${project.id}/`);\n  273:     await click(`[data-test-create-sides=\"${script.id}\"]`);\n  274  \n  275      assert.equal(\n  ...\n  281  \n  282    test(`Users can view an ad-hoc script's sides`, async function(assert) {\n  283:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  284  \n  285:     let adhocScript = this.server.create('script', { title: 'hey' });\n  286:     let sides = this.server.create('sides', {\n  287        script: adhocScript,\n  288        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  306  \n  307    test(`Users can begin creating sides from the adhoc scripts list`, async function(assert) {\n  308:     logInAs(this.server.create('user', { hasAdhoc: true }), this.server);\n  309  \n  310:     let script = this.server.create('script', { title: 'script123' });\n  311  \n  312      await visit(`/scripts/ad-hoc`);\n  313:     await click(`[data-test-create-sides=\"${script.id}\"]`);\n  314  \n  315      assert.equal(\n  ...\n  321  \n  322    test('A user can delete a sides record', async function(assert) {\n  323:     logInAs(this.server.create('user'), this.server);\n  324:     let project = this.server.create('project');\n  325:     let script = this.server.create('script', {\n  326        title: 'the best script',\n  327        projectId: project.id\n  328      });\n  329:     let sides = this.server.create('sides', {\n  330:       createdAt: moment(),\n  331        script,\n  332        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  351  \n  352    test('A user can change the title of a sides record but cancel before save and the change is reverted', async function(assert) {\n  353:     logInAs(this.server.create('user'), this.server);\n  354:     let project = this.server.create('project');\n  355:     let script = this.server.create('script', {\n  356        title: 'the best script',\n  357        projectId: project.id\n  358      });\n  359:     let sides = this.server.create('sides', {\n  360:       createdAt: moment(),\n  361        script,\n  362        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  382  \n  383    test('A user can change the title of a sides record', async function(assert) {\n  384:     logInAs(this.server.create('user'), this.server);\n  385      this.server.logging = true;\n  386:     let project = this.server.create('project');\n  387:     let script = this.server.create('script', {\n  388        title: 'the best script',\n  389        projectId: project.id\n  390      });\n  391:     let sides = this.server.create('sides', {\n  392:       createdAt: moment(),\n  393        script,\n  394        selectedSceneDisplayNumbers: '1A, 3, 4z',\n  ...\n  417    test('Sides have an overridable default title that matches the title of the script they belong to', async function(assert) {\n  418      let title = 'the best script';\n  419:     let script = this.server.create('script', { title });\n  420      let newTitle = 'the second best script';\n  421  \n  422:     this.server.create('scene', {\n  423        displaySceneNumber: '12B',\n  424        sceneNumber: 300,\n  ...\n  442    });\n  443  \n  444:   test('Users can create sides from script page', async function(assert) {\n  445:     let script = this.server.create('script', { title: 'the best script' });\n  446  \n  447      await visit(`/scripts/script/${script.id}`);\n  448:     await click('[data-test-create-sides]');\n  449  \n  450      assert.equal(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/fixtures/currentUser.js:\n    1  import EmberObject from '@ember/object';\n    2  \n    3: let adhocRole = EmberObject.create({\n    4    id: 1,\n    5    vfxEditor: true,\n    .\n   25  };\n   26  \n   27: let adhocVfxEditorRole = EmberObject.create({\n   28    id: 2,\n   29    vfxEditor: true,\n   ..\n   42  };\n   43  \n   44: let noAdhocVfxEditorRole = EmberObject.create({\n   45    id: 2,\n   46    vfxEditor: false,\n   ..\n   59  };\n   60  \n   61: let adhocElementEditorRole = EmberObject.create({\n   62    id: 3,\n   63    vfxEditor: false,\n   ..\n   76  };\n   77  \n   78: let noAdhocElementEditorRole = EmberObject.create({\n   79    id: 3,\n   80    vfxEditor: true,\n   ..\n   93  };\n   94  \n   95: let adhocLegalEditorRole = EmberObject.create({\n   96    id: 4,\n   97    vfxEditor: false,\n   ..\n  110  };\n  111  \n  112: let noAdhocLegalEditorRole = EmberObject.create({\n  113    id: 4,\n  114    vfxEditor: false,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/helpers/log-in-as.js:\n    1  export default function logInAs(user, server) {\n    2:   let session = server.create('session', { user });\n    3    server.get('/api/sessions/current', () => session);\n    4  }\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/add-shot-test.js:\n   12      let storeStub = {\n   13        peekRecord(_, id) {\n   14:         return EmberObject.create({ id });\n   15        },\n   16:       createRecord(_, obj) {\n   17:         return EmberObject.create(obj);\n   18        }\n   19      };\n   20:     let script = EmberObject.create({\n   21        scenes: [\n   22:         EmberObject.create({\n   23            sceneNumber: 23,\n   24            displaySceneNumber: 'b23'\n   ..\n   32      this.set('lineIds', [1]);\n   33      this.set('clearShotParams', () => true);\n   34:     this.set('openNewlyCreatedShot', () => true);\n   35      this.set('tearDownStub', () => true);\n   36  \n   ..\n   43              @lineIds={{lineIds}}\n   44              @clearShotParams={{action clearShotParams}}\n   45:             @openNewShot={{action openNewlyCreatedShot}}\n   46              @_tearDownShot={{action tearDownStub}}\n   47          />`\n   ..\n   58      let storeStub = {\n   59        peekRecord(_, id) {\n   60:         return EmberObject.create({ id });\n   61        },\n   62:       createRecord(_, obj) {\n   63:         return EmberObject.create(obj);\n   64        }\n   65      };\n   66:     let script = EmberObject.create({\n   67        scenes: [\n   68:         EmberObject.create({\n   69            sceneNumber: 23,\n   70            displaySceneNumber: 'b23'\n   ..\n   79      this.set('lineIds', [1]);\n   80      this.set('clearShotParams', () => true);\n   81:     this.set('openNewlyCreatedShot', () => true);\n   82      this.set('tearDownStub', () => true);\n   83      this.set('closeShotModal', () => {\n   ..\n   93              @lineIds={{lineIds}}\n   94              @clearShotParams={{action clearShotParams}}\n   95:             @openNewShot={{action openNewlyCreatedShot}}\n   96              @closeShotModal={{action closeShotModal}}\n   97              @_tearDownShot={{action tearDownStub}}\n   ..\n  103    });\n  104  \n  105:   test('clicking the save button performs the createShot task which calls save on the shot and openNewShot function', async function(assert) {\n  106      assert.expect(4);\n  107      let scrollStateManagerStub = {\n  ...\n  113      let storeStub = {\n  114        peekRecord(_, id) {\n  115:         return EmberObject.create({ id });\n  116        },\n  117:       createRecord(_, obj) {\n  118:         let newEmberObj = EmberObject.create(obj);\n  119          newEmberObj['save'] = save;\n  120          return newEmberObj;\n  121        }\n  122      };\n  123:     let script = EmberObject.create({\n  124        scenes: [\n  125:         EmberObject.create({\n  126            sceneNumber: 23,\n  127            displaySceneNumber: 'b23'\n  ...\n  136      this.set('lineIds', [1]);\n  137      this.set('clearShotParams', () => true);\n  138:     this.set('openNewlyCreatedShot', shot => {\n  139        assert.equal(shot.lines[0].id, 1);\n  140        assert.equal(shot.value, 'I am the very model of a modern major general');\n  ...\n  152              @lineIds={{lineIds}}\n  153              @clearShotParams={{action clearShotParams}}\n  154:             @openNewShot={{action openNewlyCreatedShot}}\n  155              @closeShotModal={{action closeShotModal}}\n  156              @_tearDownShot={{action tearDownStub}}\n  ...\n  174      let storeStub = {\n  175        peekRecord(_, id) {\n  176:         return EmberObject.create({ id });\n  177        },\n  178:       createRecord(_, obj) {\n  179:         let newEmberObj = EmberObject.create(obj);\n  180          newEmberObj['save'] = save;\n  181          return newEmberObj;\n  182        }\n  183      };\n  184:     let script = EmberObject.create({\n  185        scenes: [\n  186:         EmberObject.create({\n  187            sceneNumber: 23,\n  188            displaySceneNumber: 'b23'\n  ...\n  197      this.set('lineIds', [1]);\n  198      this.set('clearShotParams', () => true);\n  199:     this.set('openNewlyCreatedShot', () => true);\n  200      this.set('tearDownStub', () => true);\n  201      this.set('closeShotModal', () => true);\n  ...\n  210              @lineIds={{lineIds}}\n  211              @clearShotParams={{action clearShotParams}}\n  212:             @openNewShot={{action openNewlyCreatedShot}}\n  213              @closeShotModal={{action closeShotModal}}\n  214              @_tearDownShot={{action tearDownStub}}\n  ...\n  228          assert.equal(\n  229            message,\n  230:           'Shot created successfully.',\n  231            'Shot creation displays intended message when successful'\n  232          );\n  ...\n  240      this.owner.register('service:notifications', stubbedNotificationService);\n  241  \n  242:     let scene = EmberObject.create({ sceneNumber: 2, displaySceneNumber: 'b' });\n  243:     let script = EmberObject.create({ scenes: [scene] });\n  244:     let peekStub = (_, id) => EmberObject.create({ id });\n  245:     let createStub = (_, obj) => {\n  246:       let newEmberObj = EmberObject.create(obj);\n  247        newEmberObj['save'] = () => true;\n  248        return newEmberObj;\n  249      };\n  250:     let storeStub = { peekRecord: peekStub, createRecord: createStub };\n  251:     let openNewlyCreatedShot = () => true;\n  252      let scrollStateManagerStub = { scrollToShotForm: () => true };\n  253  \n  ...\n  255      this.set('scrollStateManager', scrollStateManagerStub);\n  256      this.set('store', storeStub);\n  257:     this.set('openNewlyCreatedShot', openNewlyCreatedShot);\n  258  \n  259      await render(\n  ...\n  262              @store={{store}}\n  263              @scrollStateManager={{scrollStateManager}}\n  264:             @openNewShot={{action openNewlyCreatedShot}}\n  265          />`\n  266      );\n  ...\n  278      let storeStub = {\n  279        peekRecord(_, id) {\n  280:         return EmberObject.create({ id });\n  281        },\n  282:       createRecord(_, obj) {\n  283:         let newEmberObj = EmberObject.create(obj);\n  284          newEmberObj['save'] = save;\n  285          return newEmberObj;\n  286        }\n  287      };\n  288:     let script = EmberObject.create({\n  289        scenes: [\n  290:         EmberObject.create({\n  291            sceneNumber: 23,\n  292            displaySceneNumber: 'b23'\n  ...\n  304      this.set('lineIds', [1]);\n  305      this.set('clearShotParams', () => true);\n  306:     this.set('openNewlyCreatedShot', () => true);\n  307      this.set('tearDownStub', () => true);\n  308      this.set('closeShotModal', escapeFunc);\n  ...\n  317              @clearShotParams={{action clearShotParams}}\n  318              @scrollStateManager={{scrollStateManager}}\n  319:             @openNewShot={{action openNewlyCreatedShot}}\n  320              @closeShotModal={{action closeShotModal}}\n  321              @_tearDownShot={{action tearDownStub}}\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-list-item-test.js:\n   41      };\n   42      let tags1 = [\n   43:       EmberObject.create({ value: 'Cory', scene }),\n   44:       EmberObject.create({ value: 'Topanga', scene }),\n   45:       EmberObject.create({ value: 'Shawn', scene }),\n   46:       EmberObject.create({ value: 'Eric', scene }),\n   47:       EmberObject.create({ value: 'Rachel', scene }),\n   48:       EmberObject.create({ value: 'Jack', scene })\n   49      ];\n   50      let tags2 = [\n   51:       EmberObject.create({ value: 'Troy', scene }),\n   52:       EmberObject.create({ value: 'Abed', scene }),\n   53:       EmberObject.create({ value: 'Jeff', scene }),\n   54:       EmberObject.create({ value: 'Britta', scene }),\n   55:       EmberObject.create({ value: 'Pierce', scene })\n   56      ];\n   57:     let activeElement = EmberObject.create({\n   58        id: 1,\n   59        label: 'Pennbrook',\n   ..\n   62        elementScenes: []\n   63      });\n   64:     let otherElement = EmberObject.create({\n   65        id: 2,\n   66        label: 'Greendale',\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-menu-test.js:\n    9  \n   10    test('When instanceType=\"scenes\" our category menu renders with one option by deafult', async function(assert) {\n   11:     let category = EmberObject.create({\n   12        title: 'Hello',\n   13        color: 1\n   ..\n   33  \n   34    test('When instanceType=\"scenes\" our category menu renders with two options when \"userGenerated\" is true', async function(assert) {\n   35:     let category = EmberObject.create({\n   36        title: 'Hello',\n   37        userGenerated: true,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-scenes-left-drawer-test.js:\n   15    setupMirage(hooks);\n   16  \n   17:   let scene = EmberObject.create({\n   18      displaySceneNumber: '123b',\n   19      sceneType: 'INT.',\n   ..\n   39  \n   40    test('displays script level details about an element', async function(assert) {\n   41:     let category = this.server.create('category', {\n   42        title: 'category-title-123'\n   43      });\n   44  \n   45:     let element = await createElement(this, {\n   46        category,\n   47        clearanceComment: 'seek_permission',\n   ..\n   89      });\n   90  \n   91:     let element = await createElement(this);\n   92      this.set('elementDrawerState', {\n   93        openInstance: { activeElement: element, category }\n   ..\n  123      stubService('notifications', { setNotification: () => {} });\n  124  \n  125:     let element = await createElement(this, {\n  126        clearanceComment: 'seek_permission',\n  127        label: 'label-label-label',\n  ...\n  215    });\n  216  \n  217:   const createElement = async ({ owner, server }, attrs = {}) => {\n  218:     let script = server.create('script');\n  219:     let scene = server.create('scene', { script });\n  220:     let element = server.create('element', {\n  221        script,\n  222        ...attrs\n  223      });\n  224:     server.create('tag', {\n  225        element,\n  226        scene,\n  ...\n  228        script\n  229      });\n  230:     server.create('elementScene', { element, scene });\n  231  \n  232      let store = owner.lookup('service:store');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-select-test.js:\n   10    test('updates categories as expected', async function(assert) {\n   11      // Element\n   12:     let editElement = EmberObject.create({\n   13        label: 'Test Element',\n   14        notes: 'Some random note'\n   ..\n   17      // Categories, associate element and first category (as the route does in\n   18      // the app)\n   19:     let category1 = EmberObject.create({\n   20        title: 'cat1',\n   21        elements: [editElement]\n   ..\n   24      editElement.category = category1;\n   25  \n   26:     let category2 = EmberObject.create({ title: 'cat2', elements: [] });\n   27:     let category3 = EmberObject.create({ title: 'cat3', elements: [] });\n   28  \n   29      // Set up component\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/color-picker-test.js:\n   31    });\n   32  \n   33:   test('it creates buttons for the correct number of values', async function(assert) {\n   34      this.set('maxColors', 10);\n   35  \n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/element-scene-display-test.js:\n   10  \n   11    test('hides inline editing form by default', async function(assert) {\n   12:     this.set('activeElement', createElement({ label: 'some element' }));\n   13:     this.set('activeScene', createScene());\n   14  \n   15      await render(hbs`\n   ..\n   26  \n   27    test('can display the inline editing form', async function(assert) {\n   28:     this.set('activeElement', createElement());\n   29:     this.set('activeScene', createScene());\n   30      this.set('isEditingElement', true);\n   31  \n   ..\n   42  \n   43    test('when we do not have a quantity we dont show the quantity section', async function(assert) {\n   44:     this.set('activeElement', createElement({ quantity: 0 }));\n   45:     this.set('activeScene', createScene());\n   46      this.set('isEditingElement', false);\n   47  \n   ..\n   59  \n   60    test(`displays notes if there are any`, async function(assert) {\n   61:     let scene = createScene();\n   62:     let element = createElement();\n   63  \n   64      element.elementScenes.push(\n   65:       EmberObject.create({\n   66          notes: 'dont forget me',\n   67          element,\n   ..\n   85  \n   86    test(`hides notes if there are NOT any`, async function(assert) {\n   87:     let scene = createScene();\n   88:     let element = createElement();\n   89  \n   90:     element.elementScenes.push(EmberObject.create({ element, scene }));\n   91  \n   92      this.set('activeElement', element);\n   ..\n  111      test('clearance comment displayed when not editing', async function(assert) {\n  112        let script = { legalEnabled: true };\n  113:       let scene = createScene({ script });\n  114:       let element = createElement();\n  115  \n  116        element.elementScenes.push(\n  117:         EmberObject.create({\n  118            clearanceComment: 'please_change',\n  119            element,\n  ...\n  138      test('when not editing hide clearance comment if there isnt one', async function(assert) {\n  139        let script = { legalEnabled: true };\n  140:       let scene = createScene({ script });\n  141:       let element = createElement();\n  142  \n  143        element.elementScenes.push(\n  144:         EmberObject.create({\n  145            element,\n  146            scene\n  ...\n  164      test('clearance comments dropdown displayed when editing', async function(assert) {\n  165        let script = { legalEnabled: true };\n  166:       let scene = createScene({ script });\n  167:       let element = createElement();\n  168  \n  169        element.elementScenes.push(\n  170:         EmberObject.create({\n  171            element,\n  172            scene\n  ...\n  199  \n  200      test('clearance comments dropdown hidden while editing', async function(assert) {\n  201:       this.set('activeElement', createElement());\n  202:       this.set('activeScene', createScene());\n  203        this.set('isEditingElement', true);\n  204  \n  ...\n  216  \n  217      test('clearance comment label hidden', async function(assert) {\n  218:       let scene = createScene();\n  219:       let element = createElement();\n  220  \n  221        element.elementScenes.push(\n  222:         EmberObject.create({\n  223            clearanceComment: 'please_change',\n  224            element,\n  ...\n  242    });\n  243  \n  244:   const createElement = (attrs = {}) => {\n  245:     let element = EmberObject.create({\n  246        elementScenes: [],\n  247        ...attrs\n  ...\n  251    };\n  252  \n  253:   const createScene = (attrs = {}) => {\n  254:     return EmberObject.create({\n  255        id: `scene-${Math.floor(Math.random() * Math.floor(100))}`,\n  256        ...attrs\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/rename-category-modal-test.js:\n    9    test('it displays the category title in the correct input', async function(assert) {\n   10      let store = this.owner.lookup('service:store');\n   11:     let category = store.createRecord('category', { title: 'Blue' });\n   12      this.set('closeCategoryEdit', () => true);\n   13      this.set('category', category);\n   ..\n   21    test('it displays the category title in the correct input', async function(assert) {\n   22      let store = this.owner.lookup('service:store');\n   23:     let category = store.createRecord('category', { title: 'Blue' });\n   24      this.set('closeCategoryEdit', () => true);\n   25      this.set('category', category);\n   ..\n   34      let closeCalled = false;\n   35      let store = this.owner.lookup('service:store');\n   36:     let category = store.createRecord('category', { title: 'Blue' });\n   37      this.set('closeCategoryEdit', () => (closeCalled = true));\n   38      this.set('category', category);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/scene-data-modal-test.js:\n   19    test('SceneDataModal renders the proper fields', async function(assert) {\n   20      const scene = run(() =>\n   21:       this.owner.lookup('service:store').createRecord('scene', sceneObject)\n   22      );\n   23      this.set('incomingScene', scene);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/scene-header-test.js:\n    7  // first scene\n    8  let fakeFirstActiveSceneId = 0;\n    9: let script = EmberObject.create({ scenes: [{ id: 1 }, { id: 2 }] });\n   10: let firstScene = EmberObject.create({\n   11    id: 1,\n   12    displaySceneNumber: '1',\n   ..\n   26    };\n   27  };\n   28: let firstPageScene = EmberObject.create({\n   29    lines: [],\n   30    scene: firstScene,\n   ..\n   35  // last scene\n   36  let fakeLastActiveSceneId = 1;\n   37: let lastScene = EmberObject.create({\n   38    id: 2,\n   39    displaySceneNumber: '2',\n   ..\n   53    };\n   54  };\n   55: let lastPageScene = EmberObject.create({\n   56    lines: [],\n   57    scene: lastScene,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/scene-list-item-test.js:\n   19        }\n   20      };\n   21:     let scene = EmberObject.create({\n   22        displaySceneNumber: '123b',\n   23        sceneType: 'INT.',\n   ..\n   55        }\n   56      };\n   57:     let scene = EmberObject.create({\n   58        displaySceneNumber: '123b',\n   59        sceneType: 'INT.',\n   ..\n   91        }\n   92      };\n   93:     let scene = EmberObject.create({\n   94        displaySceneNumber: '123b',\n   95        sceneType: 'INT.',\n   ..\n  127        }\n  128      };\n  129:     let scene = EmberObject.create({\n  130        displaySceneNumber: '123b',\n  131        sceneType: 'INT.',\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/scene-shots-test.js:\n    6  import EmberObject from '@ember/object';\n    7  \n    8: let element = EmberObject.create({\n    9    id: 1\n   10  });\n   11  \n   12: let vfxCategory = EmberObject.create({\n   13    id: 1,\n   14    title: 'VFX_ASSETS'\n   15  });\n   16  \n   17: let script = EmberObject.create({\n   18    id: 1\n   19  });\n   ..\n   23  script.elements = [element];\n   24  \n   25: let scene = EmberObject.create({\n   26    displaySceneNumber: '1'\n   27  });\n   28  \n   29  // first shot\n   30: let firstShot = EmberObject.create({\n   31    id: 1,\n   32    difficulty: 'medium',\n   ..\n   36  \n   37  // first shot's line\n   38: let line = EmberObject.create({\n   39    id: 1\n   40  });\n   41  \n   42  // second shot's line\n   43: let secondLine = EmberObject.create({\n   44    id: 2\n   45  });\n   ..\n   49  \n   50  // second shot\n   51: let secondShot = EmberObject.create({\n   52    id: 2,\n   53    difficulty: 'hard',\n   ..\n   89      this.set('scene', scene);\n   90      this.set('updateShot', () => true);\n   91:     let service = EmberObject.create({\n   92        scrollToLine() {\n   93          assert.expect(1, 'Selecting shot from list calls scrollToLine');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/script-display-test.js:\n    7  \n    8  let activeCategories = [\n    9:   EmberObject.create({ title: 'GREENERY', color: 1 }),\n   10:   EmberObject.create({ title: 'BACKGROUND', color: 2 })\n   11  ];\n   12  \n   13: let scene = EmberObject.create({ sceneNumber: 1 });\n   14: let tag = EmberObject.create({\n   15    id: 1,\n   16    parserId: 123,\n   ..\n   18    sceneNumber: 1,\n   19    sceneLineNumber: 2,\n   20:   element: EmberObject.create({})\n   21  });\n   22: let line = EmberObject.create({ text: 'THE GREENHOUSE', tags: [tag] });\n   23: let pageScene = EmberObject.create({ lines: [line], scene: scene });\n   24: let page = EmberObject.create({ pageScenes: [pageScene] });\n   25: let script = EmberObject.create({\n   26    pages: [page],\n   27    categories: activeCategories\n   ..\n   43            setActiveScene=setActiveScene\n   44            script=script\n   45:           createNewTag=updateCurrent\n   46            updateCurrentPage=updateCurrent\n   47          }}`\n   ..\n   51  \n   52    test('if a scene is not active it has a deactive class', async function(assert) {\n   53:     let scrollStateManagerService = EmberObject.create({\n   54        scrollToScene(passedSceneId) {\n   55          assert.equal(passedSceneId, sceneId);\n   ..\n   72            script=script\n   73            activeSceneId=activeSceneId\n   74:           createNewTag=updateCurrent\n   75            updateCurrentPage=updateCurrent\n   76            setActiveScene=setActiveScene\n   ..\n   93  \n   94    test('if activeSceneNumber is passed in we fire scrollToScene with the scene.id', async function(assert) {\n   95:     let scrollStateManagerService = EmberObject.create({\n   96        scrollToScene(passedSceneId) {\n   97          assert.equal(passedSceneId, sceneId);\n   ..\n  114            script=script\n  115            activeSceneId=activeSceneId\n  116:           createNewTag=updateCurrent\n  117            setActiveScene=setActiveScene\n  118            updateCurrentPage=updateCurrent\n  ...\n  140      let stubbedService = { hasVfx: () => true };\n  141      stubService('features', stubbedService);\n  142:     let scrollStateManagerService = EmberObject.create({\n  143        scrollToScene(passedSceneId) {\n  144          assert.equal(passedSceneId, sceneId);\n  ...\n  163            isShots=isShots\n  164            activeSceneId=activeSceneId\n  165:           createNewTag=updateCurrent\n  166            setActiveScene=setActiveScene\n  167            updateCurrentPage=updateCurrent\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/script-line-test.js:\n   10    test('it renders the text', async function(assert) {\n   11      let activeCategories = [\n   12:       EmberObject.create({ title: 'GREENERY' }),\n   13:       EmberObject.create({ title: 'BACKGROUND' })\n   14      ];\n   15      let line = {\n   ..\n   35    test('it tags the approriate word', async function(assert) {\n   36      let activeCategories = [\n   37:       EmberObject.create({ title: 'GREENERY', isActive: true }),\n   38:       EmberObject.create({ title: 'BACKGROUND', isActive: true })\n   39      ];\n   40      let line = {\n   ..\n   42      };\n   43      let tags = [\n   44:       EmberObject.create({\n   45          id: '123',\n   46          parserId: '123',\n   ..\n   50          sceneNumber: 1,\n   51          lines: [line],\n   52:         element: EmberObject.create({\n   53            category: activeCategories[0]\n   54          })\n   ..\n   78    test('it tags the approriate words with multiple taggedTerms', async function(assert) {\n   79      let activeCategories = [\n   80:       EmberObject.create({ title: 'GREENERY', isActive: true }),\n   81:       EmberObject.create({ title: 'BACKGROUND', isActive: true })\n   82      ];\n   83      let line = {\n   ..\n   85      };\n   86      let tags = [\n   87:       EmberObject.create({\n   88          id: '123',\n   89          parserId: '123',\n   ..\n   93          sceneNumber: 1,\n   94          lines: [line],\n   95:         element: EmberObject.create({\n   96            category: activeCategories[0]\n   97          })\n   98        }),\n   99:       EmberObject.create({\n  100          id: '124',\n  101          parserId: '124',\n  ...\n  105          sceneNumber: 1,\n  106          lines: [line],\n  107:         element: EmberObject.create({\n  108            category: activeCategories[1]\n  109          })\n  ...\n  134    test('it recomputes the scriptLineList once an id has been assigned to a new tag', async function(assert) {\n  135      let activeCategories = [\n  136:       EmberObject.create({ title: 'GREENERY', isActive: true }),\n  137:       EmberObject.create({ title: 'BACKGROUND', isActive: true })\n  138      ];\n  139      let line = {\n  ...\n  141      };\n  142      let tags = [\n  143:       EmberObject.create({\n  144          parserId: '123',\n  145          type: 'GREENERY',\n  ...\n  148          sceneNumber: 1,\n  149          lines: [line],\n  150:         element: EmberObject.create({\n  151            category: activeCategories[0]\n  152          })\n  ...\n  186    test('it tags approriately with multi-word tags', async function(assert) {\n  187      let activeCategories = [\n  188:       EmberObject.create({ title: 'GREENERY', color: 1, isActive: true }),\n  189:       EmberObject.create({ title: 'BACKGROUND', color: 2, isActive: true })\n  190      ];\n  191      let line = {\n  ...\n  194      };\n  195      let tags = [\n  196:       EmberObject.create({\n  197          id: '1',\n  198          type: 'GREENERY',\n  ...\n  201          sceneNumber: 1,\n  202          lines: [line],\n  203:         element: EmberObject.create({\n  204            lay: 'lawn is green',\n  205            label: 'lawn is green',\n  ...\n  233    test('if the tag type is not in the active categories it does not display', async function(assert) {\n  234      let allCategories = [\n  235:       EmberObject.create({ title: 'GREENERY', color: 1, isActive: false }),\n  236:       EmberObject.create({ title: 'BACKGROUND', color: 2, isActive: true })\n  237      ];\n  238      let line = {\n  ...\n  247      };\n  248      let tags = [\n  249:       EmberObject.create({\n  250          id: '123',\n  251          parserId: '123',\n  ...\n  253          value: 'lawn',\n  254          lines: [line],\n  255:         element: EmberObject.create({\n  256            category: allCategories[0]\n  257          })\n  ...\n  282    test('Does not unintentionally remove text after extra whitespace', async function(assert) {\n  283      let activeCategories = [\n  284:       EmberObject.create({ title: 'GREENERY', isActive: true }),\n  285:       EmberObject.create({ title: 'BACKGROUND', isActive: true })\n  286      ];\n  287      let line = {\n  ...\n  290      };\n  291      let tags = [\n  292:       EmberObject.create({\n  293          id: '123',\n  294          parserId: '123',\n  ...\n  298          sceneNumber: 1,\n  299          lines: [line],\n  300:         element: EmberObject.create({})\n  301        })\n  302      ];\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/shots-tab-scene-list-div-test.js:\n    5  import EmberObject from '@ember/object';\n    6  \n    7: let firstScene = EmberObject.create({\n    8    displaySceneNumber: '1',\n    9    sceneType: 'Over',\n   ..\n   11    location2: 'There'\n   12  });\n   13: let firstShot = EmberObject.create({ value: \"I'm a shot\" });\n   14: let secondShot = EmberObject.create({ value: \"I'm another shot\" });\n   15  firstScene.shots = [firstShot, secondShot];\n   16  \n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/shots-tab-test.js:\n    8  // scene\n    9  let fakeFirstActiveSceneId = 0;\n   10: let firstScene = EmberObject.create({\n   11    id: 1,\n   12    displaySceneNumber: '1',\n   ..\n   18    sceneNumber: fakeFirstActiveSceneId\n   19  });\n   20: let firstShot = EmberObject.create({ value: \"I'm a shot\" });\n   21  firstScene.shots = [firstShot];\n   22  \n   23  // second scene\n   24  let fakeLastActiveSceneId = 1;\n   25: let secondScene = EmberObject.create({\n   26    id: 2,\n   27    displaySceneNumber: '2',\n   ..\n   33    sceneNumber: fakeLastActiveSceneId\n   34  });\n   35: let secondShot = EmberObject.create({ value: \"I'm another shot\" });\n   36  secondScene.shots = [secondShot];\n   37  \n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/helpers/should-show-category-test.js:\n    5  import EmberObject from '@ember/object';\n    6  \n    7: const category = EmberObject.create({ isActive: true });\n    8: const activeScene = EmberObject.create({ id: 1 });\n    9: const element1 = EmberObject.create({});\n   10: const tag1 = EmberObject.create({});\n   11  const anyNumberGreaterThanZero = 1;\n   12  \n   ..\n   47  \n   48    test('if the category is active and the scene does not have a tag it returns false', async function(assert) {\n   49:     tag1.set('scene', EmberObject.create({ id: 23 }));\n   50      this.set('category', category);\n   51      this.set('activeScene', activeScene);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/adapters/application-test.js:\n   11    });\n   12  \n   13:   test('it creates the proper url for tag query', function(assert) {\n   14      let apiUrl = this.owner\n   15        .lookup('adapter:application')\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/add-shot-test.js:\n   10      let storeStub = {\n   11        peekRecord(_, id) {\n   12:         return EmberObject.create({ id });\n   13        },\n   14:       createRecord(_, obj) {\n   15:         let newEmberObj = EmberObject.create(obj);\n   16          newEmberObj['save'] = save;\n   17          return newEmberObj;\n   18        }\n   19      };\n   20:     let component = this.owner.factoryFor('component:add-shot').create({\n   21        store: storeStub,\n   22        lineIds: [1, 2, 3],\n   ..\n   39  \n   40    test('the _tearDownShot function calls clearShotParams and clears the shot if it is new', function(assert) {\n   41:     let component = this.owner.factoryFor('component:add-shot').create({\n   42        _setUpShot() {\n   43          return true;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/category-menu-test.js:\n    8    test('when we call delete category - all associated orphaned elements are destroyed and the category is deleted', function(assert) {\n    9      assert.expect(2);\n   10:     let element = EmberObject.create({\n   11        destroyRecord() {\n   12          assert.ok(true, 'element delete is called');\n   13        }\n   14      });\n   15:     let category = EmberObject.create({\n   16        elements: [element],\n   17        destroyRecord() {\n   ..\n   20      });\n   21      element.set('category', category);\n   22:     let component = this.owner.factoryFor('component:category-menu').create({\n   23        category\n   24      });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/scene-data-modal-test.js:\n    8      let component = this.owner\n    9        .factoryFor('component:scene-data-modal')\n   10:       .create();\n   11      let sortableArray = [\n   12        { page: { pageNumber: 2 }, pageOrder: 1000 },\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/script-display-test.js:\n   29  \n   30    test('_endOfSelectionLineId accounts for when a user selects the whitespace at the end of a line', function(assert) {\n   31:     let component = this.owner.factoryFor('component:script-display').create();\n   32      assert.equal(\n   33        component._endOfSelectionLineId(SEL_WITH_WHITESPACE),\n   ..\n   38  \n   39    test('_getLineIds function returns an array of the line ids for a given selection', function(assert) {\n   40:     let component = this.owner.factoryFor('component:script-display').create();\n   41      let multiLines = true;\n   42      assert.equal(\n   ..\n   58  \n   59    test('_getLineIds function returns an array of the first line id if it is not multiline', function(assert) {\n   60:     let component = this.owner.factoryFor('component:script-display').create();\n   61      let multiLines = false;\n   62      assert.equal(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/script-line-test.js:\n    7  \n    8    test('_getIntegratedTagValue returns the correct line in a single line tag and its index', function(assert) {\n    9:     let component = this.owner.factoryFor('component:script-line').create();\n   10:     let line1 = EmberObject.create({ id: 1, text: 'James is a good person.' });\n   11:     let tag = EmberObject.create({ value: 'James.', lines: [line1] });\n   12  \n   13      assert.equal(\n   ..\n   19  \n   20    test('_getIntegratedTagValue returns the correct line in a multiline tag and its index', function(assert) {\n   21:     let component = this.owner.factoryFor('component:script-line').create();\n   22:     let line1 = EmberObject.create({ id: 1, text: 'James is a good person.' });\n   23:     let line2 = EmberObject.create({ id: 2, text: 'who is always nice.' });\n   24:     let tag = EmberObject.create({\n   25        value: 'person\\nwho is',\n   26        lines: [line1, line2]\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/script-upload-test.js:\n    8      let component = this.owner\n    9        .factoryFor('component:script-upload')\n   10:       .create({ forceReparse: 'some item', projectId: 1 });\n   11  \n   12      assert.equal(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/shot-form-test.js:\n    7  \n    8    test('vfxCategory is VFX_ASSETS if that category exists', function(assert) {\n    9:     let component = this.owner.factoryFor('component:shot-form').create();\n   10:     let shot = EmberObject.create({ id: 1 });\n   11:     let script = EmberObject.create({ id: 1 });\n   12:     let category1 = EmberObject.create({ id: 1, title: 'VFX_ASSETS' });\n   13:     let category2 = EmberObject.create({ id: 2, title: 'VISUAL_FX' });\n   14      script.categories = [category1, category2];\n   15      shot.script = script;\n   ..\n   19  \n   20    test('vfxCategory is VISUAL_FX if VFX_ASSETS category does not exist', function(assert) {\n   21:     let component = this.owner.factoryFor('component:shot-form').create();\n   22:     let shot = EmberObject.create({ id: 1 });\n   23:     let script = EmberObject.create({ id: 1 });\n   24:     let category1 = EmberObject.create({ id: 1, title: '' });\n   25:     let category2 = EmberObject.create({ id: 2, title: 'VISUAL_FX' });\n   26      script.categories = [category1, category2];\n   27      shot.script = script;\n   ..\n   31  \n   32    test('all of a scripts element labels show up', function(assert) {\n   33:     let component = this.owner.factoryFor('component:shot-form').create();\n   34:     let shot = EmberObject.create({ id: 1 });\n   35:     let script = EmberObject.create({ id: 1 });\n   36:     let category1 = EmberObject.create({ id: 1, title: '' });\n   37:     let category2 = EmberObject.create({ id: 2, title: 'VISUAL_FX' });\n   38:     let nonVfxAsset = EmberObject.create({\n   39        id: 1,\n   40        label: 'Non-VFX Asset element'\n   41      });\n   42      category1.elements = [nonVfxAsset];\n   43:     let vfxAsset = EmberObject.create({ id: 2, label: 'VFX Asset element' });\n   44      category2.elements = [vfxAsset];\n   45      set(script, 'categories', [category1, category2]);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/controllers/scripts/script/show/filter-categories-test.js:\n    3  import EmberObject from '@ember/object';\n    4  \n    5: const CAT1 = EmberObject.create({ title: 'set_design' });\n    6: const CAT2 = EmberObject.create({ title: 'dogs' });\n    7: const CAT3 = EmberObject.create({ title: 'cats' });\n    8  \n    9  module('Unit | Controller | scripts/script/show/filter-categories', function(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/mixins/scene-modifier-functions-test.js:\n   10        SceneModifierFunctionsMixin\n   11      );\n   12:     let subject = SceneModifierFunctionsObject.create();\n   13      assert.ok(subject);\n   14      assert.equal(typeof subject.saveNewSceneTask.perform, 'function');\n   ..\n   19      assert.equal(typeof subject._sortPageFunctions, 'function');\n   20      assert.equal(\n   21:       typeof subject._createNewPageSceneAndUpdateLines.perform,\n   22        'function'\n   23      );\n   ..\n   30        SceneModifierFunctionsMixin\n   31      );\n   32:     let subject = SceneModifierFunctionsObject.create();\n   33      assert.equal(subject._sortPageFunctions(pageSceneA, pageSceneB), -1);\n   34      assert.equal(subject._sortPageFunctions(pageSceneB, pageSceneA), 1);\n   ..\n   41        SceneModifierFunctionsMixin\n   42      );\n   43:     let subject = SceneModifierFunctionsObject.create();\n   44      assert.equal(subject._sortPageFunctions(pageSceneA, pageSceneB), -1);\n   45      assert.equal(subject._sortPageFunctions(pageSceneB, pageSceneA), 1);\n   ..\n   52        SceneModifierFunctionsMixin\n   53      );\n   54:     let subject = SceneModifierFunctionsObject.create();\n   55      assert.equal(subject._sortPageFunctions(pageSceneA, pageSceneB), 0);\n   56    });\n   ..\n   61        SceneModifierFunctionsMixin\n   62      );\n   63:     let subject = SceneModifierFunctionsObject.create();\n   64      assert.equal(\n   65        subject._getLinesToActiveDown(pageScene, destinationLine).toString(),\n   ..\n   73        SceneModifierFunctionsMixin\n   74      );\n   75:     let subject = SceneModifierFunctionsObject.create();\n   76      assert.equal(\n   77        subject._getLinesToActiveUp(pageScene, destinationLine).toString(),\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/mixins/script-options-test.js:\n    7    test('mixin provides the arrays for categories and versions on scripts', function(assert) {\n    8      let ScriptOptionsObject = EmberObject.extend(ScriptOptionsMixin);\n    9:     let subject = ScriptOptionsObject.create();\n   10      assert.equal(subject.versions.length, 28);\n   11      assert.equal(subject.versions.firstObject, 'None');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/page-scene-test.js:\n    7    test('firstPageSceneInScene properly returns if a pageScene is the first in its scene', function(assert) {\n    8      let store = this.owner.lookup('service:store');\n    9:     let scene = store.createRecord('scene', {});\n   10:     let page = store.createRecord('page', { pageNumber: 1 });\n   11:     let page2 = store.createRecord('page', { pageNumber: 2 });\n   12  \n   13:     // Create PageScenes to test if they know their location in the scene\n   14:     let pageScene1 = store.createRecord('page-scene', {\n   15        pageOrder: 2,\n   16        page,\n   17        scene\n   18      });\n   19:     let pageScene2 = store.createRecord('page-scene', {\n   20        pageOrder: 3,\n   21        page,\n   22        scene\n   23      });\n   24:     let pageScene3 = store.createRecord('page-scene', {\n   25        pageOrder: 1,\n   26        page2,\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/scene-test.js:\n    7    test('it exists', function(assert) {\n    8      let store = this.owner.lookup('service:store');\n    9:     let model = store.createRecord('scene', {});\n   10      assert.ok(model);\n   11    });\n   ..\n   13    test('sceneDescriptionToDisplay removes the displaySceneNumber from sceneDescription if it exists', function(assert) {\n   14      let store = this.owner.lookup('service:store');\n   15:     let model = store.createRecord('scene', {\n   16        displaySceneNumber: '1b',\n   17        sceneDescription: '1b I am a scene description'\n   ..\n   22    test('sceneDescriptionToDisplay returns the sceneDescription if there is no displaySceneNumber', function(assert) {\n   23      let store = this.owner.lookup('service:store');\n   24:     let model = store.createRecord('scene', {\n   25        sceneDescription: '1b I am a scene description'\n   26      });\n   ..\n   33    test('_getSplitEighths returns an array with the first item as string 0 and second the fraction if there is only a fraction', function(assert) {\n   34      let store = this.owner.lookup('service:store');\n   35:     let model = store.createRecord('scene');\n   36      assert.equal(model._getSplitEighths('1/8')[0], '0');\n   37      assert.equal(model._getSplitEighths('1/8')[1], '1/8');\n   ..\n   40    test('_getSplitEighths returns an array with the first item as the whole number string and second the fraction if there is a whole number and a fraction', function(assert) {\n   41      let store = this.owner.lookup('service:store');\n   42:     let model = store.createRecord('scene');\n   43      assert.equal(model._getSplitEighths('1 1/8')[0], '1');\n   44      assert.equal(model._getSplitEighths('1 1/8')[1], '1/8');\n   ..\n   47    test('sceneEightsWhole returns a whole number if one is present in sceneLength and sceneEightsFraction returns the fraction', function(assert) {\n   48      let store = this.owner.lookup('service:store');\n   49:     let model = store.createRecord('scene', { sceneEights: '2 3/8' });\n   50      assert.equal(model.sceneEightsWhole, '2');\n   51      assert.equal(model.sceneEightsFraction, '3/8');\n   ..\n   54    test('sceneEightsWhole returns a string 0 if one is not present in sceneLength and sceneEightsFraction returns the fraction', function(assert) {\n   55      let store = this.owner.lookup('service:store');\n   56:     let model = store.createRecord('scene', { sceneEights: '5/8' });\n   57      assert.equal(model.sceneEightsWhole, '0');\n   58      assert.equal(model.sceneEightsFraction, '5/8');\n   ..\n   61    test('sceneEightsWhole and sceneEightsFraction return 0s as strings if sceneEights is null', function(assert) {\n   62      let store = this.owner.lookup('service:store');\n   63:     let model = store.createRecord('scene');\n   64      assert.equal(model.sceneEightsWhole, '0');\n   65      assert.equal(model.sceneEightsFraction, '0');\n   ..\n   68    test('sceneEightsWhole returns the whole number string and sceneEightsFraction returns a 0 string if sceneEights is a whole number', function(assert) {\n   69      let store = this.owner.lookup('service:store');\n   70:     let model = store.createRecord('scene', { sceneEights: '8' });\n   71      assert.equal(model.sceneEightsWhole, '8');\n   72      assert.equal(model.sceneEightsFraction, '0');\n   ..\n   75    test('setting sceneEightsWhole and sceneEightsFraction with 0 does not include 0 in the value', function(assert) {\n   76      let store = this.owner.lookup('service:store');\n   77:     let model = store.createRecord('scene', { sceneEights: '8 1/8' });\n   78      model.set('sceneEightsWhole', '0');\n   79      assert.equal(model.sceneEights, '1/8');\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/script-test.js:\n    9      let store = this.owner.lookup('service:store');\n   10      let completeModel = run(() => {\n   11:       return store.createRecord('script', { parsedState: 'complete' });\n   12      });\n   13      let parsingModel = run(() => {\n   14:       return store.createRecord('script', { parsedState: 'parsing' });\n   15      });\n   16      assert.ok(completeModel.parseComplete);\n   ..\n   21      let store = this.owner.lookup('service:store');\n   22      let record = run(() => {\n   23:       return store.createRecord('script', {\n   24          version: 'yellow',\n   25          category: 'production draft',\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/sides-test.js:\n    9      let store = this.owner.lookup('service:store');\n   10      let completeSides = run(() => {\n   11:       return store.createRecord('sides', { googleDriveId: 'abcdefg' });\n   12      });\n   13      let sidesInProgress = run(() => {\n   14:       return store.createRecord('sides', { googleDriveId: null });\n   15      });\n   16      assert.ok(completeSides.sidesCreationComplete);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/tag-test.js:\n   10      let line1, line2;\n   11      let model = run(() => {\n   12:       line1 = store.createRecord('line', { text: '1' });\n   13:       line2 = store.createRecord('line', { text: '2' });\n   14:       return store.createRecord('tag', { lines: [line1, line2] });\n   15      });\n   16      assert.equal(model.line, line1);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/services/features-test.js:\n   31        test('a Netflix User has the capability for a given projectId', function(assert) {\n   32          stubService('current-user', randomCapableNetlfixUser);\n   33:         let service = this.owner.factoryFor('service:features').create();\n   34  \n   35          let hasCapability = service.hasCapability(\n   ..\n   42        test('a Prodicle User has the capability for a given projectId', function(assert) {\n   43          stubService('current-user', randomCapableProdicleUser);\n   44:         let service = this.owner.factoryFor('service:features').create();\n   45  \n   46          let hasCapability = service.hasCapability(\n   ..\n   58        test('a Netflix User has no capabilities', function(assert) {\n   59          stubService('current-user', noCapabilitiesNetflixUser);\n   60:         let service = this.owner.factoryFor('service:features').create();\n   61  \n   62          let hasCapability = service.hasCapability(\n   ..\n   69        test('a Prodicle User has no capabilities', function(assert) {\n   70          stubService('current-user', noCapabilitiesProdicleUser);\n   71:         let service = this.owner.factoryFor('service:features').create();\n   72  \n   73          let hasCapability = service.hasCapability(\n   ..\n   80        test(\"when a Netflix User's capabilities do not match a given projectId\", function(assert) {\n   81          stubService('current-user', randomCapableNetlfixUser);\n   82:         let service = this.owner.factoryFor('service:features').create();\n   83  \n   84          let hasCapability = service.hasCapability(\n   ..\n   91        test(\"a Prodicle User's capabilities do not match a given projectId\", function(assert) {\n   92          stubService('current-user', randomCapableProdicleUser);\n   93:         let service = this.owner.factoryFor('service:features').create();\n   94  \n   95          let hasCapability = service.hasCapability(\n   ..\n  105      test('is true when the user is a Netflix user with a VFX Editor adhocRole and the script is adhoc', function(assert) {\n  106        stubService('current-user', adhocVfxEditor);\n  107:       let service = this.owner.factoryFor('service:features').create();\n  108  \n  109        let hasVfx = service.hasVfx(adhocScript.projectId);\n  ...\n  113      test('is false when the user is a Netflix user without a VFX Editor adhocRole and the script is adhoc', function(assert) {\n  114        stubService('current-user', noAdhocVfxEditor);\n  115:       let service = this.owner.factoryFor('service:features').create();\n  116  \n  117        let hasVfx = service.hasVfx(adhocScript.projectId);\n  ...\n  121      test('is false when the user is a Prodicle user and the script is adhoc', function(assert) {\n  122        stubService('current-user', noCapabilitiesProdicleUser);\n  123:       let service = this.owner.factoryFor('service:features').create();\n  124  \n  125        let hasVfx = service.hasVfx(adhocScript.projectId);\n  ...\n  129      test('does not call #hasCapability if the user is a Netflix user and the script is adhoc', function(assert) {\n  130        stubService('current-user', noCapabilitiesNetflixUser);\n  131:       let service = this.owner.factoryFor('service:features').create();\n  132        set(service, 'hasCapability', () => assert.step('#hasCapability called'));\n  133        service.hasVfx(adhocScript.projectId);\n  ...\n  137      test('calls #hasCapability if the script is not adhoc', function(assert) {\n  138        stubService('current-user', noCapabilitiesProdicleUser);\n  139:       let service = this.owner.factoryFor('service:features').create();\n  140        set(service, 'hasCapability', () => assert.step('#hasCapability called'));\n  141        service.hasVfx(projectScript.projectId);\n  ...\n  147      test('is true when the user has a Legal Editor adhocRole  and the script is adhoc', function(assert) {\n  148        stubService('current-user', adhocLegalEditor);\n  149:       let service = this.owner.factoryFor('service:features').create();\n  150        let hasLegal = service.hasLegal(adhocScript.projectId);\n  151        assert.ok(hasLegal);\n  ...\n  154      test('is false when the user does not have a Legal Editor adhocRole and the script is adhoc', function(assert) {\n  155        stubService('current-user', noAdhocLegalEditor);\n  156:       let service = this.owner.factoryFor('service:features').create();\n  157        let hasLegal = service.hasLegal(adhocScript.projectId);\n  158        assert.notOk(hasLegal);\n  ...\n  161      test('is false when the user is a Prodicle user and the script is adhoc', function(assert) {\n  162        stubService('current-user', noCapabilitiesProdicleUser);\n  163:       let service = this.owner.factoryFor('service:features').create();\n  164        let hasLegal = service.hasLegal(adhocScript.projectId);\n  165        assert.notOk(hasLegal);\n  ...\n  168      test('does not call #hasCapability if the script is adhoc', function(assert) {\n  169        stubService('current-user', noCapabilitiesNetflixUser);\n  170:       let service = this.owner.factoryFor('service:features').create();\n  171        set(service, 'hasCapability', () => assert.step('#hasCapability called'));\n  172        service.hasLegal(adhocScript.projectId);\n  ...\n  176      test('calls #hasCapability if script is not adhoc', function(assert) {\n  177        stubService('current-user', noCapabilitiesProdicleUser);\n  178:       let service = this.owner.factoryFor('service:features').create();\n  179        set(service, 'hasCapability', () => assert.step('#hasCapability called'));\n  180        service.hasLegal(projectScript.projectId);\n  ...\n  186      test('is true when the script has a projectId', function(assert) {\n  187        stubService('current-user', adhocElementEditor);\n  188:       let service = this.owner.factoryFor('service:features').create();\n  189        let hasElement = service.hasElement(projectScript.projectId);\n  190        assert.ok(hasElement);\n  ...\n  193      test('is true when the user has an Element Editor adhocRole and the script is adhoc', function(assert) {\n  194        stubService('current-user', adhocElementEditor);\n  195:       let service = this.owner.factoryFor('service:features').create();\n  196        let hasElement = service.hasElement(adhocScript.projectId);\n  197        assert.ok(hasElement);\n  ...\n  200      test('is false when the user does not have a Legal Editor adhocRole and the script is adhoc', function(assert) {\n  201        stubService('current-user', noAdhocElementEditor);\n  202:       let service = this.owner.factoryFor('service:features').create();\n  203        let hasLegal = service.hasLegal(adhocScript.projectId);\n  204        assert.notOk(hasLegal);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/services/sheet-export-test.js:\n   24        includeVfxBreakdownReport: false\n   25      };\n   26:     let service = this.owner.factoryFor('service:sheet-export').create();\n   27      service.initDriveContext(passedInControllerContext);\n   28      let serviceControllerContext = service.exportController;\n   ..\n   64  \n   65    test('#_getRequestURL returns intended URL', function(assert) {\n   66:     let service = this.owner.factoryFor('service:sheet-export').create();\n   67      assert.equal(\n   68        service._getRequestURL('elementReport'),\n\n630 matches across 86 files\n\n\nSearching 458 files for \"createEl\"\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/metrics-adapters/gtag.js:\n   24  \n   25      // Load gtag\n   26:     let gtagScript = document.createElement('script');\n   27      gtagScript.async = true;\n   28      gtagScript.src = `https://www.googletagmanager.com/gtag/js?id=${id}`;\n   ..\n   31      // Configure gtag\n   32      let scriptContents = `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', '${id}');`;\n   33:     let configSript = document.createElement('script');\n   34      configSript.text = scriptContents;\n   35      document.body.appendChild(configSript);\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/script.js:\n  110        .then(blob => {\n  111          let url = window.URL.createObjectURL(blob);\n  112:         let a = document.createElement('a');\n  113          a.href = url;\n  114          a.download = `${this.fileName.replace(\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/sides.js:\n   31        .then(blob => {\n   32          let url = window.URL.createObjectURL(blob);\n   33:         let a = document.createElement('a');\n   34          a.href = url;\n   35          a.download = `${this.title}.pdf`;\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-scenes-left-drawer-test.js:\n   43      });\n   44  \n   45:     let element = await createElement(this, {\n   46        category,\n   47        clearanceComment: 'seek_permission',\n   ..\n   89      });\n   90  \n   91:     let element = await createElement(this);\n   92      this.set('elementDrawerState', {\n   93        openInstance: { activeElement: element, category }\n   ..\n  123      stubService('notifications', { setNotification: () => {} });\n  124  \n  125:     let element = await createElement(this, {\n  126        clearanceComment: 'seek_permission',\n  127        label: 'label-label-label',\n  ...\n  215    });\n  216  \n  217:   const createElement = async ({ owner, server }, attrs = {}) => {\n  218      let script = server.create('script');\n  219      let scene = server.create('scene', { script });\n\n/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/element-scene-display-test.js:\n   10  \n   11    test('hides inline editing form by default', async function(assert) {\n   12:     this.set('activeElement', createElement({ label: 'some element' }));\n   13      this.set('activeScene', createScene());\n   14  \n   ..\n   26  \n   27    test('can display the inline editing form', async function(assert) {\n   28:     this.set('activeElement', createElement());\n   29      this.set('activeScene', createScene());\n   30      this.set('isEditingElement', true);\n   ..\n   42  \n   43    test('when we do not have a quantity we dont show the quantity section', async function(assert) {\n   44:     this.set('activeElement', createElement({ quantity: 0 }));\n   45      this.set('activeScene', createScene());\n   46      this.set('isEditingElement', false);\n   ..\n   60    test(`displays notes if there are any`, async function(assert) {\n   61      let scene = createScene();\n   62:     let element = createElement();\n   63  \n   64      element.elementScenes.push(\n   ..\n   86    test(`hides notes if there are NOT any`, async function(assert) {\n   87      let scene = createScene();\n   88:     let element = createElement();\n   89  \n   90      element.elementScenes.push(EmberObject.create({ element, scene }));\n   ..\n  112        let script = { legalEnabled: true };\n  113        let scene = createScene({ script });\n  114:       let element = createElement();\n  115  \n  116        element.elementScenes.push(\n  ...\n  139        let script = { legalEnabled: true };\n  140        let scene = createScene({ script });\n  141:       let element = createElement();\n  142  \n  143        element.elementScenes.push(\n  ...\n  165        let script = { legalEnabled: true };\n  166        let scene = createScene({ script });\n  167:       let element = createElement();\n  168  \n  169        element.elementScenes.push(\n  ...\n  199  \n  200      test('clearance comments dropdown hidden while editing', async function(assert) {\n  201:       this.set('activeElement', createElement());\n  202        this.set('activeScene', createScene());\n  203        this.set('isEditingElement', true);\n  ...\n  217      test('clearance comment label hidden', async function(assert) {\n  218        let scene = createScene();\n  219:       let element = createElement();\n  220  \n  221        element.elementScenes.push(\n  ...\n  242    });\n  243  \n  244:   const createElement = (attrs = {}) => {\n  245      let element = EmberObject.create({\n  246        elementScenes: [],\n\n19 matches across 5 files\n",
			"settings":
			{
				"buffer_size": 120651,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/element-scene-display-test.js",
			"settings":
			{
				"buffer_size": 7147,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/package.json",
			"settings":
			{
				"buffer_size": 3085,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/features.js",
			"settings":
			{
				"buffer_size": 1362,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/user.js",
			"settings":
			{
				"buffer_size": 763,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/adhoc-role.js",
			"settings":
			{
				"buffer_size": 226,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"javasc",
				"Set Syntax: JavaScript"
			],
			[
				"hi",
				"Sublime Merge: File History"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"wor",
				"Word Wrap: Toggle"
			],
			[
				"bla",
				"Sublime Merge: Blame File"
			],
			[
				"col",
				"UI: Select Color Scheme"
			],
			[
				"them",
				"UI: Select Theme"
			],
			[
				"hb",
				"Set Syntax: Handlebars"
			],
			[
				"op",
				"Sublime Merge: Open Repository"
			],
			[
				"hist",
				"Sublime Merge: File History"
			],
			[
				"ren",
				"Rename File"
			],
			[
				"jav",
				"Set Syntax: JavaScript"
			],
			[
				"ja",
				"Set Syntax: JavaScript"
			],
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"so",
				"Sort Lines"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"wo",
				"Word Wrap: Toggle"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"Mark",
				"Set Syntax: Markdown"
			],
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"h",
				"Sublime Merge: File History"
			],
			[
				"js",
				"Preferences: JsPrettier Settings - Default"
			],
			[
				"jsp",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"jsa",
				"Set Syntax: JavaScript"
			],
			[
				"bl",
				"Sublime Merge: Blame File"
			],
			[
				"keb",
				"Preferences: Key Bindings"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"save as",
				"Project: Save As"
			],
			[
				"form",
				"JsPrettier: Format Code"
			],
			[
				"uni",
				"Permute Lines: Unique"
			],
			[
				"co",
				"UI: Select Color Scheme"
			],
			[
				"ope re",
				"Sublime Merge: Open Repository"
			],
			[
				"blam",
				"Sublime Merge: Blame File"
			],
			[
				"merge",
				"Sublime Merge: Open Repository"
			],
			[
				"ha",
				"Set Syntax: Handlebars"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"uin",
				"Permute Lines: Unique"
			],
			[
				"jsfor",
				"JsPrettier: Format Code"
			],
			[
				"convert",
				"Indentation: Convert to Spaces"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"pret",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"keyb",
				"Preferences: Key Bindings"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"rmeo\t",
				"Package Control: Remove Package"
			],
			[
				"new pr",
				"Project Manager: Add New Project"
			],
			[
				"add",
				"Project: Add Folder"
			],
			[
				"jsprett",
				"Preferences: JsPrettier Settings - User"
			],
			[
				"key ",
				"Preferences: Key Bindings"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"ui",
				"UI: Select Theme"
			],
			[
				"css\t",
				"Set Syntax: CSS"
			],
			[
				"hand",
				"Set Syntax: Handlebars"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"new pro",
				"Project Manager: Add New Project"
			],
			[
				"in",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 150.0,
		"history":
		[
			"/qwer"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/tj/code/dockyard/prodicle_scripts_ui",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/vendor"
	],
	"file_history":
	[
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/config/environment.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/utils/drive-upload-widget.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/upload/choose-file.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/controllers/scripts/upload/choose-file-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/ember-cli-build.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/application.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/features.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/package-lock.json",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-information.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/package.json",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/parsing-in-progress-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/vendor/api.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/.eslintrc.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/not-found.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/export/choose-export-options.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/index.html",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/router.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/not-found-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/not-found.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/routes/not-found-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/upload-script-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/show/export/choose-export-options.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/upload/choose-file.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/metrics-adapters/gtag.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/sides.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/sheet-export.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/drive-uploader.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/drive-uploader.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/script-information-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-upload.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/page-scene-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-line.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-line.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/shots-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/breakdown-script-tag.css",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-display.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/breakdown-scene-list.css",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/shot.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/show.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/mirage/serializers/page.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/mirage/serializers/page-scene.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/mirage/serializers/line.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/line.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/scene.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/mirage/serializers/script.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/scene-header.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/qwer-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/scroll-state-manager.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/page.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/page-scene.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/page.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/script.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/fixtures/scripts.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/sides-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/script-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/script-line-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/script-line-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/modules/color-grid.css",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-information.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/upload/script-information.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/upload/script-information.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/adapters/application.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/helpers/date-picker-value-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/helpers/date-picker-value.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/adapters/script.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/edit.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/scripts-core-nav.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/ad-hoc.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/scripts-core-nav.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/application.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/show/export/ready.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/script.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/notifications.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/banner-notice.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/banner-notice.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/projects/project/sides.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/projects.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-scenes-left-drawer-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/banner-notice-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/services/notifications-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/add-element.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/.ember-cli",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/config/optional-features.json",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/styles/app.css",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/prodicle-page-header.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/ad-hoc.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/projects/project.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/acceptance/projects-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/helpers/log-in-as.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/projects/project.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/ad-hoc.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/script-table.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/helpers/stub-service.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/projects/index.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/projects/project/index.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/script/sides/show.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/sides/show.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/ad-hoc/index.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/scripts/ad-hoc/index.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-scenes-left-drawer.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/category-scenes-left-drawer.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/user.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/adapters/application-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-select.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/element.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/mirage/config.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/category-select.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/current-user.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/application.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-select-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/shot-form.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-menu.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/components/category-menu-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/category-list-item-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/script-display-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/shot-form.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/prodicle-scripts-typeahead.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/prodicle-scripts-typeahead.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/routes/scripts/script/show/add-element.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/script-display.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/category.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/templates/components/category-list-item.hbs",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-list-item.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/tag.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/components/category-element-list-item.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/unit/models/element-test.js",
		"/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/scene-shots-test.js"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 113.0,
		"where_history":
		[
			"",
			"tests/",
			"tests/acceptance/",
			"tests/acceptance",
			"",
			"src/app/",
			"",
			"tests/",
			"",
			"node_modules/",
			"",
			"tests/",
			"",
			"tests/",
			"",
			"app/",
			"",
			"tests/",
			"tests",
			"",
			"*.hbs",
			"",
			"tests/",
			"",
			"app/",
			"tests/",
			"tests",
			"",
			"tests/acceptance/",
			"tests/",
			"",
			"tests/",
			"",
			"app/models/",
			"",
			"app/",
			"",
			"tests/acceptance/",
			"",
			"tests/acceptance/",
			"",
			"app/components/",
			"app/components",
			"",
			"src/app/",
			"src/tests/",
			"tests",
			"",
			"tests",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"createEl",
			"create",
			"logInA",
			"includeVfxBreakdownReport",
			"VfxBreakdown",
			"clientId",
			"must be a valid",
			"proteg",
			"pickerCallback",
			"drive-upload-w",
			"proteg",
			"e.typ",
			"raven",
			"sourcemap",
			"sourcema",
			"sentry",
			"parenteElem",
			"capabil",
			"jquery",
			"recogn",
			"url ",
			"not found",
			"*",
			"404",
			"not-foun",
			"<script",
			"initializeGapi",
			"gapi",
			"initializeGapi",
			"apiloaded",
			"apis.goo",
			"createEle",
			"<script",
			"apiLoaded",
			"initDriveContext",
			"sheetExport",
			"drive-upload-wi",
			"new Date(",
			"doesnt",
			"postcs",
			"less",
			"scss",
			"%lolly",
			"        @",
			"lollypop",
			".lollypop",
			"var(",
			"$",
			"@extend",
			"        content: \"\";\n        padding-right: 3px; /* 3px = needed padding for a 16px touchable area for dragging the edge of the tag for expansion. 6px of total padding + 10px content width */\n        padding-left: 3px;\n        width: 10px;\n        height: 28px;\n        position: absolute;\n        bottom: 0;\n        box-sizing: content-box;\n        background: url(\"data:image/svg+xml,<svg width='10' height='27' viewBox='0 0 10 27' xmlns='http://www.w3.org/2000/svg'><path d='M6 9.9V27H4V9.9A5.002 5.002 0 0 1 5 0a5 5 0 0 1 1 9.9z' fill='#1F6DEA' fill-rule='evenodd'/></svg>\") center center no-repeat;\n        cursor: pointer;\n",
			"        content: \"\";\n        padding-right: 3px; /* 3px = needed padding for a 16px touchable area for dragging the edge of the tag for expansion. 6px of total padding + 10px content width */\n        padding-left: 3px;\n        width: 10px;\n        height: 28px;\n        position: absolute;\n        bottom: 0;\n        box-sizing: content-box;\n",
			"none",
			"\"",
			"mungedLine",
			"after",
			".is",
			"before",
			".breakdown-script-tag",
			"first-of-ty",
			"nth-",
			"nth",
			"child",
			"sass",
			"scss",
			"sass",
			"M6",
			"m69",
			"shot",
			"h3",
			"data-scene-num",
			"hi-",
			", ",
			"showShot",
			"<SceneHead",
			"{{scene-head",
			"scene-head",
			"omitted",
			"scrollToScene",
			"parsing in",
			"task",
			"line",
			"{",
			"\\n",
			"selected",
			"is-selected",
			"lines:",
			"text",
			"line",
			"breakdown-script-tag",
			"highlight-type-",
			"is-selected",
			"multilin",
			"multi-lin",
			"{{script-line",
			"script-line",
			"scriptline",
			"highlight-type-",
			"highlight-type-shot",
			"project",
			"api/proj",
			"perform",
			"queryParams: ",
			"date-picker",
			"datePickerValue",
			"I think ",
			"1286",
			"writtenDateError",
			"setDateRange",
			"setSmallDateRange",
			"setDateRange",
			"setWrittenDate",
			"1286",
			"<ScriptInformation",
			"submitScriptData",
			"1286",
			"YYYY",
			"moment",
			"1286",
			"TODO",
			"_self",
			"meechum",
			"section",
			"core-n",
			"core-nav",
			"obelix",
			"target=\"_",
			"target=\"bl",
			"requestFailed"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"import { me } from 'prodicle-scripts-ui/mirage/fixtures/sessions';",
			"",
			"removeElement",
			"data-test-remove-element",
			"data-test-element-remove",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 224,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"_nv_visual_sel_mode": "mode_visual_line",
							"auto_name": "https://philippe.bourgau.net/detailed-agenda-for-a",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/controllers/scripts/script/show/export/choose-export-options.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4052,
						"regions":
						{
						},
						"selection":
						[
							[
								2211,
								2236
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_visual",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 32
							}
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 120651,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										254,
										279
									],
									[
										473,
										498
									],
									[
										673,
										698
									],
									[
										867,
										892
									],
									[
										1061,
										1086
									],
									[
										1299,
										1324
									],
									[
										1476,
										1501
									],
									[
										1771,
										1796
									],
									[
										1982,
										2007
									],
									[
										2048,
										2073
									],
									[
										2423,
										2429
									],
									[
										2657,
										2663
									],
									[
										3063,
										3069
									],
									[
										3286,
										3292
									],
									[
										3593,
										3599
									],
									[
										3885,
										3891
									],
									[
										4168,
										4174
									],
									[
										4524,
										4530
									],
									[
										4903,
										4909
									],
									[
										5239,
										5245
									],
									[
										5524,
										5530
									],
									[
										5766,
										5772
									],
									[
										5987,
										5993
									],
									[
										6268,
										6274
									],
									[
										6524,
										6530
									],
									[
										6848,
										6854
									],
									[
										7122,
										7128
									],
									[
										7375,
										7381
									],
									[
										7704,
										7710
									],
									[
										7860,
										7866
									],
									[
										7898,
										7904
									],
									[
										8117,
										8123
									],
									[
										8316,
										8322
									],
									[
										8572,
										8578
									],
									[
										8775,
										8781
									],
									[
										8815,
										8821
									],
									[
										8960,
										8966
									],
									[
										9062,
										9068
									],
									[
										9076,
										9082
									],
									[
										9299,
										9305
									],
									[
										9401,
										9407
									],
									[
										9415,
										9421
									],
									[
										9638,
										9644
									],
									[
										9740,
										9746
									],
									[
										9754,
										9760
									],
									[
										9986,
										9992
									],
									[
										10197,
										10203
									],
									[
										10237,
										10243
									],
									[
										10277,
										10283
									],
									[
										10471,
										10477
									],
									[
										10656,
										10662
									],
									[
										10767,
										10773
									],
									[
										10788,
										10794
									],
									[
										10961,
										10967
									],
									[
										11080,
										11086
									],
									[
										11109,
										11115
									],
									[
										11290,
										11296
									],
									[
										11408,
										11414
									],
									[
										11436,
										11442
									],
									[
										11610,
										11616
									],
									[
										11790,
										11796
									],
									[
										11928,
										11934
									],
									[
										11953,
										11959
									],
									[
										12130,
										12136
									],
									[
										12244,
										12250
									],
									[
										12268,
										12274
									],
									[
										12488,
										12494
									],
									[
										12684,
										12690
									],
									[
										12855,
										12861
									],
									[
										13060,
										13066
									],
									[
										13236,
										13242
									],
									[
										13457,
										13463
									],
									[
										13738,
										13744
									],
									[
										13779,
										13785
									],
									[
										13986,
										13992
									],
									[
										14208,
										14214
									],
									[
										14514,
										14520
									],
									[
										14645,
										14651
									],
									[
										14840,
										14846
									],
									[
										15079,
										15085
									],
									[
										15300,
										15306
									],
									[
										15538,
										15544
									],
									[
										15774,
										15780
									],
									[
										15924,
										15930
									],
									[
										16243,
										16249
									],
									[
										16494,
										16500
									],
									[
										16762,
										16768
									],
									[
										16998,
										17004
									],
									[
										17022,
										17028
									],
									[
										17061,
										17067
									],
									[
										17105,
										17111
									],
									[
										17246,
										17252
									],
									[
										17418,
										17424
									],
									[
										17701,
										17707
									],
									[
										17931,
										17937
									],
									[
										18073,
										18079
									],
									[
										18333,
										18339
									],
									[
										18622,
										18628
									],
									[
										18943,
										18949
									],
									[
										19222,
										19228
									],
									[
										19486,
										19492
									],
									[
										19879,
										19885
									],
									[
										20101,
										20107
									],
									[
										20307,
										20313
									],
									[
										20555,
										20561
									],
									[
										20941,
										20947
									],
									[
										21246,
										21252
									],
									[
										21367,
										21373
									],
									[
										21612,
										21618
									],
									[
										21764,
										21770
									],
									[
										21857,
										21863
									],
									[
										22203,
										22209
									],
									[
										22458,
										22464
									],
									[
										22748,
										22754
									],
									[
										22981,
										22987
									],
									[
										23036,
										23042
									],
									[
										23272,
										23278
									],
									[
										23503,
										23509
									],
									[
										23558,
										23564
									],
									[
										23838,
										23844
									],
									[
										24175,
										24181
									],
									[
										24317,
										24323
									],
									[
										24526,
										24532
									],
									[
										24726,
										24732
									],
									[
										25032,
										25038
									],
									[
										25275,
										25281
									],
									[
										25378,
										25384
									],
									[
										25570,
										25576
									],
									[
										25926,
										25932
									],
									[
										26290,
										26296
									],
									[
										26401,
										26407
									],
									[
										26541,
										26547
									],
									[
										26654,
										26660
									],
									[
										26729,
										26735
									],
									[
										26831,
										26837
									],
									[
										26972,
										26978
									],
									[
										27018,
										27024
									],
									[
										27251,
										27257
									],
									[
										27579,
										27585
									],
									[
										28044,
										28050
									],
									[
										28111,
										28117
									],
									[
										28531,
										28537
									],
									[
										28781,
										28787
									],
									[
										29061,
										29067
									],
									[
										29360,
										29366
									],
									[
										29403,
										29409
									],
									[
										29646,
										29652
									],
									[
										29833,
										29839
									],
									[
										29931,
										29937
									],
									[
										30187,
										30193
									],
									[
										30218,
										30224
									],
									[
										30561,
										30567
									],
									[
										30743,
										30749
									],
									[
										30936,
										30942
									],
									[
										31248,
										31254
									],
									[
										31574,
										31580
									],
									[
										31707,
										31713
									],
									[
										31757,
										31763
									],
									[
										31961,
										31967
									],
									[
										32204,
										32210
									],
									[
										32332,
										32338
									],
									[
										32432,
										32438
									],
									[
										32689,
										32695
									],
									[
										32723,
										32729
									],
									[
										33021,
										33027
									],
									[
										33130,
										33136
									],
									[
										33169,
										33175
									],
									[
										33385,
										33391
									],
									[
										33549,
										33555
									],
									[
										33669,
										33675
									],
									[
										33847,
										33853
									],
									[
										34124,
										34130
									],
									[
										34211,
										34217
									],
									[
										34326,
										34332
									],
									[
										34410,
										34416
									],
									[
										34501,
										34507
									],
									[
										34576,
										34582
									],
									[
										34758,
										34764
									],
									[
										34874,
										34880
									],
									[
										35085,
										35091
									],
									[
										35366,
										35372
									],
									[
										35603,
										35609
									],
									[
										35926,
										35932
									],
									[
										36195,
										36201
									],
									[
										36386,
										36392
									],
									[
										36660,
										36666
									],
									[
										36844,
										36850
									],
									[
										37019,
										37025
									],
									[
										37297,
										37303
									],
									[
										37612,
										37618
									],
									[
										37799,
										37805
									],
									[
										38051,
										38057
									],
									[
										38146,
										38152
									],
									[
										38221,
										38227
									],
									[
										38296,
										38302
									],
									[
										38522,
										38528
									],
									[
										38578,
										38584
									],
									[
										38662,
										38668
									],
									[
										38746,
										38752
									],
									[
										39018,
										39024
									],
									[
										39074,
										39080
									],
									[
										39158,
										39164
									],
									[
										39242,
										39248
									],
									[
										39583,
										39589
									],
									[
										39848,
										39854
									],
									[
										39990,
										39996
									],
									[
										40307,
										40313
									],
									[
										40333,
										40339
									],
									[
										40440,
										40446
									],
									[
										40757,
										40763
									],
									[
										40783,
										40789
									],
									[
										40997,
										41003
									],
									[
										41248,
										41254
									],
									[
										41340,
										41346
									],
									[
										41411,
										41417
									],
									[
										41595,
										41601
									],
									[
										41842,
										41848
									],
									[
										42137,
										42143
									],
									[
										42288,
										42294
									],
									[
										42550,
										42556
									],
									[
										42783,
										42789
									],
									[
										43121,
										43127
									],
									[
										43226,
										43232
									],
									[
										43461,
										43467
									],
									[
										43573,
										43579
									],
									[
										43646,
										43652
									],
									[
										43868,
										43874
									],
									[
										43989,
										43995
									],
									[
										44209,
										44215
									],
									[
										44318,
										44324
									],
									[
										44724,
										44730
									],
									[
										44884,
										44890
									],
									[
										44929,
										44935
									],
									[
										45204,
										45210
									],
									[
										45364,
										45370
									],
									[
										45811,
										45817
									],
									[
										46041,
										46047
									],
									[
										46319,
										46325
									],
									[
										46543,
										46549
									],
									[
										46644,
										46650
									],
									[
										47028,
										47034
									],
									[
										47110,
										47116
									],
									[
										47189,
										47195
									],
									[
										47279,
										47285
									],
									[
										47411,
										47417
									],
									[
										47496,
										47502
									],
									[
										47578,
										47584
									],
									[
										47854,
										47860
									],
									[
										47917,
										47923
									],
									[
										48101,
										48107
									],
									[
										48285,
										48291
									],
									[
										48467,
										48473
									],
									[
										48530,
										48536
									],
									[
										48770,
										48776
									],
									[
										48833,
										48839
									],
									[
										49062,
										49068
									],
									[
										49125,
										49131
									],
									[
										49327,
										49333
									],
									[
										49390,
										49396
									],
									[
										49597,
										49603
									],
									[
										49660,
										49666
									],
									[
										49831,
										49837
									],
									[
										50002,
										50008
									],
									[
										50212,
										50218
									],
									[
										50275,
										50281
									],
									[
										50483,
										50489
									],
									[
										50729,
										50735
									],
									[
										51015,
										51021
									],
									[
										51078,
										51084
									],
									[
										51305,
										51311
									],
									[
										51355,
										51361
									],
									[
										51602,
										51608
									],
									[
										51665,
										51671
									],
									[
										51825,
										51831
									],
									[
										51985,
										51991
									],
									[
										52181,
										52187
									],
									[
										52231,
										52237
									],
									[
										52462,
										52468
									],
									[
										52512,
										52518
									],
									[
										52675,
										52681
									],
									[
										52727,
										52733
									],
									[
										53003,
										53009
									],
									[
										53087,
										53093
									],
									[
										53277,
										53283
									],
									[
										53467,
										53473
									],
									[
										53593,
										53599
									],
									[
										53677,
										53683
									],
									[
										53761,
										53767
									],
									[
										53919,
										53925
									],
									[
										54077,
										54083
									],
									[
										54290,
										54296
									],
									[
										54414,
										54420
									],
									[
										54640,
										54646
									],
									[
										54724,
										54730
									],
									[
										54953,
										54959
									],
									[
										55037,
										55043
									],
									[
										55268,
										55274
									],
									[
										55352,
										55358
									],
									[
										55661,
										55667
									],
									[
										55727,
										55733
									],
									[
										55810,
										55816
									],
									[
										55841,
										55847
									],
									[
										56006,
										56012
									],
									[
										56120,
										56126
									],
									[
										56312,
										56318
									],
									[
										56486,
										56492
									],
									[
										56569,
										56575
									],
									[
										56600,
										56606
									],
									[
										56851,
										56857
									],
									[
										56945,
										56951
									],
									[
										57033,
										57039
									],
									[
										57064,
										57070
									],
									[
										57257,
										57263
									],
									[
										57288,
										57294
									],
									[
										57526,
										57532
									],
									[
										57612,
										57618
									],
									[
										57683,
										57689
									],
									[
										57714,
										57720
									],
									[
										57992,
										57998
									],
									[
										58078,
										58084
									],
									[
										58161,
										58167
									],
									[
										58192,
										58198
									],
									[
										58481,
										58487
									],
									[
										58548,
										58554
									],
									[
										58603,
										58609
									],
									[
										58746,
										58752
									],
									[
										58777,
										58783
									],
									[
										59069,
										59075
									],
									[
										59135,
										59141
									],
									[
										59218,
										59224
									],
									[
										59249,
										59255
									],
									[
										59502,
										59508
									],
									[
										59653,
										59659
									],
									[
										59728,
										59734
									],
									[
										59783,
										59789
									],
									[
										59912,
										59918
									],
									[
										59943,
										59949
									],
									[
										60184,
										60190
									],
									[
										60449,
										60455
									],
									[
										60524,
										60530
									],
									[
										60579,
										60585
									],
									[
										60733,
										60739
									],
									[
										60925,
										60931
									],
									[
										61024,
										61030
									],
									[
										61095,
										61101
									],
									[
										61348,
										61354
									],
									[
										61442,
										61448
									],
									[
										61570,
										61576
									],
									[
										61755,
										61761
									],
									[
										61822,
										61828
									],
									[
										61877,
										61883
									],
									[
										62020,
										62026
									],
									[
										62051,
										62057
									],
									[
										62331,
										62337
									],
									[
										62398,
										62404
									],
									[
										62453,
										62459
									],
									[
										62596,
										62602
									],
									[
										62627,
										62633
									],
									[
										62857,
										62863
									],
									[
										62963,
										62969
									],
									[
										63018,
										63024
									],
									[
										63161,
										63167
									],
									[
										63192,
										63198
									],
									[
										63507,
										63513
									],
									[
										63619,
										63625
									],
									[
										63760,
										63766
									],
									[
										63853,
										63859
									],
									[
										64000,
										64006
									],
									[
										64221,
										64227
									],
									[
										64340,
										64346
									],
									[
										64461,
										64467
									],
									[
										64585,
										64591
									],
									[
										64711,
										64717
									],
									[
										64832,
										64838
									],
									[
										64956,
										64962
									],
									[
										65170,
										65176
									],
									[
										65461,
										65467
									],
									[
										65506,
										65512
									],
									[
										65563,
										65569
									],
									[
										65641,
										65647
									],
									[
										65700,
										65706
									],
									[
										65911,
										65917
									],
									[
										66154,
										66160
									],
									[
										66347,
										66353
									],
									[
										66392,
										66398
									],
									[
										66449,
										66455
									],
									[
										66527,
										66533
									],
									[
										66586,
										66592
									],
									[
										66797,
										66803
									],
									[
										67078,
										67084
									],
									[
										67291,
										67297
									],
									[
										67561,
										67567
									],
									[
										67606,
										67612
									],
									[
										67674,
										67680
									],
									[
										67830,
										67836
									],
									[
										67889,
										67895
									],
									[
										68100,
										68106
									],
									[
										68419,
										68425
									],
									[
										68654,
										68660
									],
									[
										68699,
										68705
									],
									[
										68767,
										68773
									],
									[
										68923,
										68929
									],
									[
										68982,
										68988
									],
									[
										69193,
										69199
									],
									[
										69479,
										69485
									],
									[
										69696,
										69702
									],
									[
										69947,
										69953
									],
									[
										70036,
										70042
									],
									[
										70114,
										70120
									],
									[
										70145,
										70151
									],
									[
										70215,
										70221
									],
									[
										70373,
										70379
									],
									[
										70387,
										70393
									],
									[
										70425,
										70431
									],
									[
										70677,
										70683
									],
									[
										70700,
										70706
									],
									[
										70901,
										70907
									],
									[
										71050,
										71056
									],
									[
										71095,
										71101
									],
									[
										71163,
										71169
									],
									[
										71319,
										71325
									],
									[
										71378,
										71384
									],
									[
										71589,
										71595
									],
									[
										71897,
										71903
									],
									[
										72200,
										72206
									],
									[
										72259,
										72265
									],
									[
										72321,
										72327
									],
									[
										72381,
										72387
									],
									[
										72440,
										72446
									],
									[
										72501,
										72507
									],
									[
										72598,
										72604
									],
									[
										72657,
										72663
									],
									[
										72716,
										72722
									],
									[
										72775,
										72781
									],
									[
										72836,
										72842
									],
									[
										72928,
										72934
									],
									[
										73084,
										73090
									],
									[
										73415,
										73421
									],
									[
										73668,
										73674
									],
									[
										73925,
										73931
									],
									[
										74144,
										74150
									],
									[
										74260,
										74266
									],
									[
										74415,
										74421
									],
									[
										74661,
										74667
									],
									[
										74816,
										74822
									],
									[
										74906,
										74912
									],
									[
										74954,
										74960
									],
									[
										75015,
										75021
									],
									[
										75111,
										75117
									],
									[
										75228,
										75234
									],
									[
										75573,
										75579
									],
									[
										75810,
										75816
									],
									[
										75982,
										75988
									],
									[
										76062,
										76068
									],
									[
										76281,
										76287
									],
									[
										76636,
										76642
									],
									[
										76714,
										76720
									],
									[
										76896,
										76902
									],
									[
										76949,
										76955
									],
									[
										77178,
										77184
									],
									[
										77246,
										77252
									],
									[
										77429,
										77435
									],
									[
										77469,
										77475
									],
									[
										77558,
										77564
									],
									[
										77743,
										77749
									],
									[
										77783,
										77789
									],
									[
										77858,
										77864
									],
									[
										78112,
										78118
									],
									[
										78164,
										78170
									],
									[
										78257,
										78263
									],
									[
										78527,
										78533
									],
									[
										78579,
										78585
									],
									[
										78672,
										78678
									],
									[
										78906,
										78912
									],
									[
										78958,
										78964
									],
									[
										79051,
										79057
									],
									[
										79255,
										79261
									],
									[
										79310,
										79316
									],
									[
										79497,
										79503
									],
									[
										79539,
										79545
									],
									[
										79632,
										79638
									],
									[
										79761,
										79767
									],
									[
										79832,
										79838
									],
									[
										79936,
										79942
									],
									[
										79998,
										80004
									],
									[
										80396,
										80402
									],
									[
										80729,
										80735
									],
									[
										81004,
										81010
									],
									[
										81432,
										81438
									],
									[
										81719,
										81725
									],
									[
										81799,
										81805
									],
									[
										81926,
										81932
									],
									[
										82083,
										82089
									],
									[
										82209,
										82215
									],
									[
										82432,
										82438
									],
									[
										82584,
										82590
									],
									[
										82736,
										82742
									],
									[
										82888,
										82894
									],
									[
										83158,
										83164
									],
									[
										83238,
										83244
									],
									[
										83343,
										83349
									],
									[
										83459,
										83465
									],
									[
										83576,
										83582
									],
									[
										83704,
										83710
									],
									[
										83812,
										83818
									],
									[
										83919,
										83925
									],
									[
										84100,
										84106
									],
									[
										84382,
										84388
									],
									[
										84444,
										84450
									],
									[
										84535,
										84541
									],
									[
										84592,
										84598
									],
									[
										84731,
										84737
									],
									[
										84783,
										84789
									],
									[
										84867,
										84873
									],
									[
										84938,
										84944
									],
									[
										85007,
										85013
									],
									[
										85179,
										85185
									],
									[
										85434,
										85440
									],
									[
										85639,
										85645
									],
									[
										85947,
										85953
									],
									[
										86152,
										86158
									],
									[
										86444,
										86450
									],
									[
										86651,
										86657
									],
									[
										86996,
										87002
									],
									[
										87052,
										87058
									],
									[
										87259,
										87265
									],
									[
										87331,
										87337
									],
									[
										87486,
										87492
									],
									[
										87656,
										87662
									],
									[
										87894,
										87900
									],
									[
										87966,
										87972
									],
									[
										88121,
										88127
									],
									[
										88291,
										88297
									],
									[
										88407,
										88413
									],
									[
										88577,
										88583
									],
									[
										88835,
										88841
									],
									[
										88907,
										88913
									],
									[
										89062,
										89068
									],
									[
										89239,
										89245
									],
									[
										89464,
										89470
									],
									[
										89546,
										89552
									],
									[
										89711,
										89717
									],
									[
										89880,
										89886
									],
									[
										90143,
										90149
									],
									[
										90226,
										90232
									],
									[
										90391,
										90397
									],
									[
										90560,
										90566
									],
									[
										90800,
										90806
									],
									[
										90872,
										90878
									],
									[
										91027,
										91033
									],
									[
										91197,
										91203
									],
									[
										91442,
										91448
									],
									[
										91593,
										91599
									],
									[
										91662,
										91668
									],
									[
										91948,
										91954
									],
									[
										92104,
										92110
									],
									[
										92282,
										92288
									],
									[
										92438,
										92444
									],
									[
										92723,
										92729
									],
									[
										92790,
										92796
									],
									[
										92845,
										92851
									],
									[
										92889,
										92895
									],
									[
										93126,
										93132
									],
									[
										93368,
										93374
									],
									[
										93690,
										93696
									],
									[
										93735,
										93741
									],
									[
										93803,
										93809
									],
									[
										93994,
										94000
									],
									[
										94270,
										94276
									],
									[
										94637,
										94643
									],
									[
										94805,
										94811
									],
									[
										95022,
										95028
									],
									[
										95272,
										95278
									],
									[
										95681,
										95687
									],
									[
										95986,
										95992
									],
									[
										96264,
										96270
									],
									[
										96627,
										96633
									],
									[
										96672,
										96678
									],
									[
										96757,
										96763
									],
									[
										97040,
										97046
									],
									[
										97085,
										97091
									],
									[
										97172,
										97178
									],
									[
										97253,
										97259
									],
									[
										97533,
										97539
									],
									[
										97875,
										97881
									],
									[
										97919,
										97925
									],
									[
										97974,
										97980
									],
									[
										98032,
										98038
									],
									[
										98111,
										98117
									],
									[
										98423,
										98429
									],
									[
										98467,
										98473
									],
									[
										98522,
										98528
									],
									[
										98580,
										98586
									],
									[
										98649,
										98655
									],
									[
										98938,
										98944
									],
									[
										98982,
										98988
									],
									[
										99037,
										99043
									],
									[
										99095,
										99101
									],
									[
										99164,
										99170
									],
									[
										99244,
										99250
									],
									[
										99417,
										99423
									],
									[
										99777,
										99783
									],
									[
										99842,
										99848
									],
									[
										99901,
										99907
									],
									[
										100231,
										100237
									],
									[
										100482,
										100488
									],
									[
										100677,
										100683
									],
									[
										100963,
										100969
									],
									[
										101249,
										101255
									],
									[
										101467,
										101473
									],
									[
										101700,
										101706
									],
									[
										102130,
										102136
									],
									[
										102548,
										102554
									],
									[
										102603,
										102609
									],
									[
										102673,
										102679
									],
									[
										102736,
										102742
									],
									[
										102837,
										102843
									],
									[
										102980,
										102986
									],
									[
										103123,
										103129
									],
									[
										103415,
										103421
									],
									[
										103706,
										103712
									],
									[
										104049,
										104055
									],
									[
										104397,
										104403
									],
									[
										104827,
										104833
									],
									[
										105232,
										105238
									],
									[
										105642,
										105648
									],
									[
										106017,
										106023
									],
									[
										106406,
										106412
									],
									[
										106780,
										106786
									],
									[
										107138,
										107144
									],
									[
										107274,
										107280
									],
									[
										107519,
										107525
									],
									[
										107833,
										107839
									],
									[
										107972,
										107978
									],
									[
										108265,
										108271
									],
									[
										108329,
										108335
									],
									[
										108392,
										108398
									],
									[
										108823,
										108829
									],
									[
										109144,
										109150
									],
									[
										109443,
										109449
									],
									[
										109744,
										109750
									],
									[
										110073,
										110079
									],
									[
										110399,
										110405
									],
									[
										110738,
										110744
									],
									[
										111090,
										111096
									],
									[
										111422,
										111428
									],
									[
										111770,
										111776
									],
									[
										112151,
										112157
									],
									[
										112552,
										112558
									],
									[
										112926,
										112932
									],
									[
										113291,
										113297
									],
									[
										113641,
										113647
									],
									[
										114020,
										114026
									],
									[
										114389,
										114395
									],
									[
										114763,
										114769
									],
									[
										115145,
										115151
									],
									[
										115483,
										115489
									],
									[
										115783,
										115789
									],
									[
										116086,
										116094
									],
									[
										116472,
										116480
									],
									[
										116785,
										116793
									],
									[
										117078,
										117086
									],
									[
										117345,
										117353
									],
									[
										117500,
										117508
									],
									[
										117746,
										117754
									],
									[
										117901,
										117909
									],
									[
										118301,
										118309
									],
									[
										118532,
										118540
									],
									[
										118806,
										118814
									],
									[
										119081,
										119089
									],
									[
										119289,
										119297
									],
									[
										119526,
										119534
									],
									[
										119725,
										119733
									],
									[
										119924,
										119932
									],
									[
										120136,
										120144
									],
									[
										120404,
										120412
									],
									[
										120512,
										120520
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								120512,
								120520
							]
						],
						"settings":
						{
							"_nv_visual_sel_mode": "mode_visual",
							"color_scheme": "Packages/BetterFindBuffer/FindResults.hidden-tmTheme",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 24
							}
						},
						"translation.x": 0.0,
						"translation.y": 52534.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/tests/integration/components/element-scene-display-test.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7147,
						"regions":
						{
						},
						"selection":
						[
							[
								6974,
								6974
							]
						],
						"settings":
						{
							"_nv_visual_sel_mode": "mode_visual",
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 4
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3085,
						"regions":
						{
						},
						"selection":
						[
							[
								2320,
								2320
							]
						],
						"settings":
						{
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (NPM).sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 11
							}
						},
						"translation.x": 0.0,
						"translation.y": 828.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/services/features.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1362,
						"regions":
						{
						},
						"selection":
						[
							[
								418,
								418
							]
						],
						"settings":
						{
							"_nv_visual_sel_mode": "mode_visual",
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 18
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/user.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 763,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/tj/code/dockyard/prodicle_scripts_ui/src/app/models/adhoc-role.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 226,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Babel/JavaScript (Babel).sublime-syntax",
							"vintage":
							{
								"action": null,
								"action_count": "",
								"mode": "mode_normal",
								"motion": null,
								"motion_count": "",
								"must_capture_register_name": false,
								"partial_sequence": "",
								"register": "\"",
								"sequence": "",
								"xpos": 0
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 132.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "prodicle_scripts_ui.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"adhor",
				"src/app/models/adhoc-role.js"
			],
			[
				"user",
				"src/app/models/user.js"
			],
			[
				"feat",
				"src/app/services/features.js"
			],
			[
				"pac",
				"src/package.json"
			],
			[
				"choosexpo",
				"src/app/controllers/scripts/script/show/export/choose-export-options.js"
			],
			[
				"env",
				"src/config/environment.js"
			],
			[
				"widj",
				"src/app/utils/drive-upload-widget.js"
			],
			[
				"choo",
				"src/app/controllers/scripts/upload/choose-file.js"
			],
			[
				"drive",
				"src/app/utils/drive-upload-widget.js"
			],
			[
				"choofiltes",
				"src/tests/unit/controllers/scripts/upload/choose-file-test.js"
			],
			[
				"featu",
				"src/app/services/features.js"
			],
			[
				"applic",
				"src/app/routes/application.js"
			],
			[
				"buil",
				"src/ember-cli-build.js"
			],
			[
				"lock",
				"src/package-lock.json"
			],
			[
				"bui",
				"src/ember-cli-build.js"
			],
			[
				"scripinhb",
				"src/app/templates/components/script-information.hbs"
			],
			[
				"esli",
				"src/.eslintrc.js"
			],
			[
				"buid",
				"src/ember-cli-build.js"
			],
			[
				"api",
				"src/vendor/api.js"
			],
			[
				"gapi",
				"src/tests/integration/components/parsing-in-progress-test.js"
			],
			[
				"notfou",
				"src/app/routes/not-found.js"
			],
			[
				"pack",
				"src/package.json"
			],
			[
				"route",
				"src/app/router.js"
			],
			[
				"notfoutes",
				"src/tests/unit/routes/not-found-test.js"
			],
			[
				"notfo",
				"src/tests/acceptance/not-found-test.js"
			],
			[
				"router",
				"src/app/router.js"
			],
			[
				"indeh",
				"src/app/index.html"
			],
			[
				"choosefil",
				"src/app/controllers/scripts/upload/choose-file.js"
			],
			[
				"sides",
				"src/app/models/sides.js"
			],
			[
				"eslin",
				"src/.eslintrc.js"
			],
			[
				"chooepxo",
				"src/app/templates/scripts/script/show/export/choose-export-options.hbs"
			],
			[
				"choosexpih",
				"src/app/templates/scripts/script/show/export/choose-export-options.hbs"
			],
			[
				"shee",
				"src/app/services/sheet-export.js"
			],
			[
				"chohb",
				"src/app/templates/scripts/upload/choose-file.hbs"
			],
			[
				"driup",
				"src/app/components/drive-uploader.js"
			],
			[
				"chooshb",
				"src/app/templates/scripts/upload/choose-file.hbs"
			],
			[
				"drivupl",
				"src/app/templates/components/drive-uploader.hbs"
			],
			[
				"utils/",
				"src/app/utils/drive-upload-widget.js"
			],
			[
				"upload",
				"src/app/components/script-upload.js"
			],
			[
				"services/",
				"src/app/services/sheet-export.js"
			],
			[
				"gta",
				"src/app/metrics-adapters/gtag.js"
			],
			[
				"breakscta",
				"src/app/styles/modules/breakdown-script-tag.css"
			],
			[
				"breakdownscpt",
				"src/app/styles/modules/breakdown-script-tag.css"
			],
			[
				"scripli",
				"src/app/components/script-line.js"
			],
			[
				"sciplinhb",
				"src/app/templates/components/script-line.hbs"
			],
			[
				"shotste",
				"src/tests/acceptance/shots-test.js"
			],
			[
				"scipinhb",
				"src/app/templates/components/script-information.hbs"
			],
			[
				"scirpinftes",
				"src/tests/acceptance/script-information-test.js"
			],
			[
				"lineh",
				"src/app/templates/components/script-line.hbs"
			],
			[
				"scriptlin",
				"src/app/components/script-line.js"
			],
			[
				"breakdscrtag",
				"src/app/styles/modules/breakdown-script-tag.css"
			],
			[
				"line",
				"src/app/models/line.js"
			],
			[
				"shot",
				"src/app/models/shot.js"
			],
			[
				"scen",
				"src/app/models/scene.js"
			],
			[
				"scri",
				"src/app/models/script.js"
			],
			[
				"seria",
				"src/mirage/serializers/script.js"
			],
			[
				"scirp.js",
				"src/app/models/script.js"
			],
			[
				"showhb",
				"src/app/templates/scripts/script/show.hbs"
			],
			[
				"agesce",
				"src/app/models/page-scene.js"
			],
			[
				"page",
				"src/app/models/page.js"
			],
			[
				"scrip",
				"src/app/models/script.js"
			],
			[
				"scrolst",
				"src/app/services/scroll-state-manager.js"
			],
			[
				"scne",
				"src/app/models/scene.js"
			],
			[
				"scene",
				"src/app/models/scene.js"
			],
			[
				"sideste",
				"src/tests/acceptance/sides-test.js"
			],
			[
				"scriplite",
				"src/tests/integration/components/script-line-test.js"
			],
			[
				"fixtures/sc",
				"src/tests/fixtures/scripts.js"
			],
			[
				"pagesce",
				"src/app/models/page-scene.js"
			],
			[
				"scriptline",
				"src/app/components/script-line.js"
			],
			[
				"adapter",
				"src/app/adapters/application.js"
			],
			[
				"scirpinfhb",
				"src/app/templates/scripts/upload/script-information.hbs"
			],
			[
				"scripinftest",
				"src/tests/acceptance/script-information-test.js"
			],
			[
				"scripinfo",
				"src/app/controllers/scripts/upload/script-information.js"
			],
			[
				"scripinf",
				"src/app/components/script-information.js"
			],
			[
				"adapters/sc",
				"src/app/adapters/script.js"
			],
			[
				"adhoc",
				"src/app/routes/scripts/ad-hoc.js"
			],
			[
				"en",
				"src/config/environment.js"
			],
			[
				"corenav",
				"src/app/components/scripts-core-nav.js"
			],
			[
				"pa",
				"src/package.json"
			],
			[
				"scripcoren",
				"src/app/templates/components/scripts-core-nav.hbs"
			],
			[
				"apphb",
				"src/app/templates/application.hbs"
			],
			[
				"app",
				"src/app/routes/application.js"
			],
			[
				"noti",
				"src/app/services/notifications.js"
			],
			[
				"script.js",
				"src/app/routes/scripts/script.js"
			],
			[
				"project",
				"src/app/routes/scripts/projects.js"
			],
			[
				"scripts/scr",
				"src/app/routes/scripts/script.js"
			],
			[
				"appl",
				"src/app/routes/application.js"
			],
			[
				"not",
				"src/app/services/notifications.js"
			],
			[
				"sides.js",
				"src/app/routes/scripts/projects/project/sides.js"
			],
			[
				"banerte",
				"src/tests/integration/components/banner-notice-test.js"
			],
			[
				"nott",
				"src/tests/unit/services/notifications-test.js"
			],
			[
				"bannnot",
				"src/tests/integration/components/banner-notice-test.js"
			],
			[
				"bann",
				"src/app/components/banner-notice.js"
			],
			[
				"banneno",
				"src/app/templates/components/banner-notice.hbs"
			],
			[
				"notif",
				"src/app/services/notifications.js"
			],
			[
				".emb",
				"src/.ember-cli"
			],
			[
				"packo",
				"src/package-lock.json"
			],
			[
				"option",
				"src/config/optional-features.json"
			],
			[
				"clibui",
				"src/ember-cli-build.js"
			],
			[
				"controproje",
				"src/app/controllers/scripts/projects/project.js"
			],
			[
				"log",
				"src/tests/helpers/log-in-as.js"
			],
			[
				"logi",
				"src/tests/helpers/log-in-as.js"
			],
			[
				"projectet",
				"src/tests/acceptance/projects-test.js"
			],
			[
				"prodipageh",
				"src/app/templates/components/prodicle-page-header.hbs"
			],
			[
				"scritabh",
				"src/app/templates/components/script-table.hbs"
			],
			[
				"projechb",
				"src/app/templates/scripts/projects/project.hbs"
			],
			[
				"adhoc.js",
				"src/app/controllers/scripts/ad-hoc.js"
			],
			[
				"projectest",
				"src/tests/acceptance/projects-test.js"
			],
			[
				"roject",
				"src/app/controllers/scripts/projects/project.js"
			],
			[
				"projectste",
				"src/tests/acceptance/projects-test.js"
			],
			[
				"scriptabh",
				"src/app/templates/components/script-table.hbs"
			],
			[
				"stub",
				"src/tests/helpers/stub-service.js"
			],
			[
				"ahochbs",
				"src/app/templates/scripts/ad-hoc.hbs"
			],
			[
				"adhoch",
				"src/app/templates/scripts/ad-hoc.hbs"
			],
			[
				"adhoc/",
				"src/app/controllers/scripts/ad-hoc/index.js"
			],
			[
				"adhohb",
				"src/app/templates/scripts/ad-hoc.hbs"
			],
			[
				"corehn",
				"src/app/templates/components/scripts-core-nav.hbs"
			],
			[
				"apptest",
				"src/tests/unit/adapters/application-test.js"
			],
			[
				"show",
				"src/app/controllers/scripts/script/show.js"
			],
			[
				"leftdart",
				"src/tests/integration/components/category-scenes-left-drawer-test.js"
			],
			[
				"elem",
				"src/app/models/element.js"
			],
			[
				"leftda",
				"src/app/templates/components/category-scenes-left-drawer.hbs"
			],
			[
				"conf",
				"src/mirage/config.js"
			],
			[
				"scripte",
				"src/tests/acceptance/script-test.js"
			],
			[
				"caes",
				"src/app/components/category-select.js"
			],
			[
				"calef",
				"src/app/components/category-scenes-left-drawer.js"
			],
			[
				"curreuser",
				"src/app/services/current-user.js"
			],
			[
				"catselete",
				"src/tests/integration/components/category-select-test.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 614.0
	},
	"selected_group": 0,
	"settings":
	{
		"_vintageous_last_buffer_search": "source",
		"_vintageous_last_buffer_search_command": "vi_slash",
		"_vintageous_last_char_search": "'",
		"_vintageous_last_char_search_command": "vi_t",
		"_vintageous_reset_during_init": true
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 325.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
